[
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public cluedo_game.LoopSound()"
    ],
    "fields": [
      "static boolean cluedo_game.LoopSound.playSong",
      "static SourceDataLine cluedo_game.LoopSound.line",
      "static Thread cluedo_game.LoopSound.t"
    ],
    "imports": [
      "javax.sound.sampled.*",
      "java.io.File",
      "java.net.URL"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 2,
        "name": "play()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "t = new Thread(this);",
          "        t.start();"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 3,
        "name": "restartMusic()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "try {",
          "            t.join();",
          "        } catch (Exception e) { e.printStackTrace(); }"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 8,
        "name": "turnMusicOff()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "Thread t = new Thread(new Runnable() {",
          "            public void run() {",
          "                line.stop();",
          "            }",
          "        });",
          "        t.start();",
          "        playSong = false;",
          "        GameLogic.music = false;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 2,
        "name": "turnMusicOn()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "GameLogic.playMusic(true);",
          "        playSong = true;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 7,
        "name": "run()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "String fileLocation = \u0022/music/start.wav\u0022;",
          "        try {",
          "            while (playSong) {",
          "                playSound(fileLocation);",
          "                assert playSong;",
          "            }",
          "        } catch (Exception e) { e.printStackTrace(); }"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 16,
        "name": "playSound(fileName)",
        "parameters": [
          "String fileName"
        ],
        "returnType": "void",
        "sourceCode": [
          "URL streamURL = this.getClass().getResource(fileName);",
          "        AudioInputStream stream = AudioSystem.getAudioInputStream(streamURL);",
          "        AudioFormat format = stream.getFormat();",
          "        DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);",
          "        line = (SourceDataLine) AudioSystem.getLine(info);",
          "        line.open(format);",
          "        line.start();",
          "        int size = 0;",
          "        byte[] bytes = new byte[131072];",
          "        while (size != -1) {",
          "            size = stream.read(bytes, 0, bytes.length);",
          "            if (size \u003e= 0)",
          "                line.write(bytes, 0, size);",
          "        }",
          "        line.drain();",
          "        line.close();"
        ]
      }
    ],
    "name": "LoopSound",
    "packageName": "cluedo_game",
    "smellReports": {},
    "sourceCode": "package cluedo_game;\n\nimport javax.sound.sampled.*;\nimport java.io.File;\nimport java.net.URL;\n\npublic class LoopSound implements java.lang.Runnable {\n\n\tstatic boolean playSong = true;\n\n\tstatic javax.sound.sampled.SourceDataLine line = null;\n\n\tstatic java.lang.Thread t = \n      ;\n\n\tpublic LoopSound() {\n\t}\n\n\tpublic void play() {\n\t\n        t = new Thread(this);\n        t.start();\n    }\n\n\tpublic void restartMusic() {\n\t\n        try {\n            t.join();\n        } catch (Exception e) { e.printStackTrace(); }\n    }\n\n\tpublic static void turnMusicOff() {\n\t\n        Thread t = new Thread(new Runnable() {\n            public void run() {\n                line.stop();\n            }\n        });\n        t.start();\n        playSong = false;\n        GameLogic.music = false;\n    }\n\n\tpublic static void turnMusicOn() {\n\t\n        GameLogic.playMusic(true);\n        playSong = true;\n    }\n\n\t@java.lang.Override\n\tpublic void run() {\n\t\n        String fileLocation = \u0022/music/start.wav\u0022;\n        try {\n            while (playSong) {\n                playSound(fileLocation);\n                assert playSong;\n            }\n        } catch (Exception e) { e.printStackTrace(); }\n\n    }\n\n\tprotected void playSound(java.lang.String fileName) throws java.lang.Exception {\n\t\n        URL streamURL = this.getClass().getResource(fileName);\n        AudioInputStream stream = AudioSystem.getAudioInputStream(streamURL);\n\n        AudioFormat format = stream.getFormat();\n\n        DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);\n        line = (SourceDataLine) AudioSystem.getLine(info);\n        line.open(format);\n\n        line.start();\n        int size = 0;\n        byte[] bytes = new byte[131072];\n        while (size != -1) {\n            size = stream.read(bytes, 0, bytes.length);\n\n            if (size \u003e= 0)\n                line.write(bytes, 0, size);\n        }\n\n        line.drain();\n        line.close();\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public org.wasps.data.repository.concretes.JsonUtility()"
    ],
    "fields": [
      "protected JSONSerializer org.wasps.data.repository.concretes.JsonUtility._json",
      "protected List org.wasps.data.repository.concretes.JsonUtility._files",
      "protected String org.wasps.data.repository.concretes.JsonUtility._directory",
      "protected String org.wasps.data.repository.concretes.JsonUtility._path",
      "protected String org.wasps.data.repository.concretes.JsonUtility._jsonFile"
    ],
    "imports": [
      "flexjson.JSONDeserializer",
      "flexjson.JSONSerializer",
      "org.wasps.data.SingletonUtility",
      "org.wasps.data.repository.abstracts.IJsonUtility",
      "org.wasps.model.ClassModel",
      "java.io.*",
      "java.util.ArrayList",
      "java.util.List"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 3,
        "name": "getFiles()",
        "parameters": [],
        "returnType": "List",
        "sourceCode": [
          "if (_files.isEmpty())",
          "            _files.addAll(getFilesFromJson());",
          "        return _files;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 14,
        "name": "writeFiles(files)",
        "parameters": [
          "List files"
        ],
        "returnType": "void",
        "sourceCode": [
          "_files.addAll(files);",
          "        try {",
          "            File dir = new File(_path);",
          "            if (!dir.exists())",
          "                //noinspection ResultOfMethodCallIgnored",
          "                dir.mkdirs();",
          "            System.out.println(\u0022\\nWriting to: \u0022 + _jsonFile + \u0022\\n\u0022);",
          "            FileWriter writer = new FileWriter(_jsonFile, false);",
          "                _json.deepSerialize(_files, writer);",
          "            writer.flush();",
          "            writer.close();",
          "        } catch (IOException e) {",
          "            e.printStackTrace();",
          "        }"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 14,
        "name": "getFilesFromJson()",
        "parameters": [],
        "returnType": "List",
        "sourceCode": [
          "List\u003cClassModel\u003e files = new ArrayList\u003c\u003e();",
          "        File input = new File(_path);",
          "        if (!input.exists() \u0026\u0026 !_files.isEmpty()) {",
          "            writeFiles(_files);",
          "        }",
          "        try {",
          "            InputStream inputStream = new FileInputStream(input);",
          "            String fromFile = new String(inputStream.readAllBytes());",
          "            files = new JSONDeserializer\u003cArrayList\u003cClassModel\u003e\u003e().deserialize(fromFile);",
          "            _files.addAll(files);",
          "        } catch (IOException e) {",
          "            e.printStackTrace();",
          "        }",
          "        return files;"
        ]
      }
    ],
    "name": "JsonUtility",
    "packageName": "org.wasps.data.repository.concretes",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.concretes;\n\nimport flexjson.JSONDeserializer;\nimport flexjson.JSONSerializer;\nimport org.wasps.data.SingletonUtility;\nimport org.wasps.data.repository.abstracts.IJsonUtility;\nimport org.wasps.model.ClassModel;\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JsonUtility implements org.wasps.data.repository.abstracts.IJsonUtility {\n\n\tprotected flexjson.JSONSerializer _json;\n\n\tprotected java.util.List\u003corg.wasps.model.ClassModel\u003e _files;\n\n\tprotected java.lang.String _directory;\n\n\tprotected java.lang.String _path;\n\n\tprotected java.lang.String _jsonFile;\n\n\tpublic JsonUtility() {\n\t\n        _json = SingletonUtility.getJsonSerializer()\n                .exclude(\u0022rawConstructors\u0022, \u0022isInterface\u0022);\n        _files = new ArrayList\u003c\u003e();\n        _directory = System.getProperty(\u0022user.dir\u0022);\n        _path = String.format(\u0022%s/src/main/java/org/wasps/data\u0022, _directory);\n        _jsonFile = String.format(\u0022%s/%s\u0022, _path, \u0022data.json\u0022);\n    }\n\n\t@java.lang.Override\n\tpublic java.util.List\u003corg.wasps.model.ClassModel\u003e getFiles() {\n\t\n        if (_files.isEmpty())\n            _files.addAll(getFilesFromJson());\n        return _files;\n    }\n\n\t@java.lang.Override\n\tpublic void writeFiles(java.util.List\u003corg.wasps.model.ClassModel\u003e files) {\n\t\n        _files.addAll(files);\n        try {\n            File dir = new File(_path);\n            if (!dir.exists())\n                //noinspection ResultOfMethodCallIgnored\n                dir.mkdirs();\n            System.out.println(\u0022\\nWriting to: \u0022 + _jsonFile + \u0022\\n\u0022);\n            FileWriter writer = new FileWriter(_jsonFile, false);\n                _json.deepSerialize(_files, writer);\n            writer.flush();\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n\t@java.lang.Override\n\tpublic java.util.List\u003corg.wasps.model.ClassModel\u003e getFilesFromJson() {\n\t\n        List\u003cClassModel\u003e files = new ArrayList\u003c\u003e();\n        File input = new File(_path);\n\n        if (!input.exists() \u0026\u0026 !_files.isEmpty()) {\n            writeFiles(_files);\n        }\n\n        try {\n            InputStream inputStream = new FileInputStream(input);\n            String fromFile = new String(inputStream.readAllBytes());\n            files = new JSONDeserializer\u003cArrayList\u003cClassModel\u003e\u003e().deserialize(fromFile);\n            _files.addAll(files);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return files;\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [],
    "fields": [],
    "imports": [
      "org.springframework.web.multipart.MultipartFile",
      "javax.servlet.http.HttpServletRequest",
      "java.io.File",
      "java.util.List"
    ],
    "interface": true,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "createUploadDirectory(request)",
        "parameters": [
          "HttpServletRequest request"
        ],
        "returnType": "File",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "createUploadFile(directory, name)",
        "parameters": [
          "File directory",
          "String name"
        ],
        "returnType": "File",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "uploadFile(directory, file)",
        "parameters": [
          "File directory",
          "MultipartFile file"
        ],
        "returnType": "String",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "uploadAllFiles(directory, files)",
        "parameters": [
          "File directory",
          "MultipartFile[] files"
        ],
        "returnType": "String",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "getUploadedFileByNameAndType(name)",
        "parameters": [
          "String name"
        ],
        "returnType": "File",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "getUploadedFilesByType(type)",
        "parameters": [
          "String type"
        ],
        "returnType": "List",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "getUploadedFiles()",
        "parameters": [],
        "returnType": "List",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "getUploadDirectory()",
        "parameters": [],
        "returnType": "File",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "getUploadDirectory(request)",
        "parameters": [
          "HttpServletRequest request"
        ],
        "returnType": "File",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "getUploadDirectoryPath()",
        "parameters": [],
        "returnType": "String",
        "sourceCode": []
      }
    ],
    "name": "IFileUtility",
    "packageName": "org.wasps.data.repository.abstracts",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.abstracts;\n\nimport org.springframework.web.multipart.MultipartFile;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.File;\nimport java.util.List;\n\npublic interface IFileUtility {\n\n\tjava.io.File createUploadDirectory(javax.servlet.http.HttpServletRequest request);\n\n\tjava.io.File createUploadFile(java.io.File directory, java.lang.String name);\n\n\tjava.lang.String uploadFile(java.io.File directory, org.springframework.web.multipart.MultipartFile file);\n\n\tjava.lang.String uploadAllFiles(java.io.File directory, org.springframework.web.multipart.MultipartFile[] files);\n\n\tjava.io.File getUploadedFileByNameAndType(java.lang.String name);\n\n\tjava.util.List\u003cjava.io.File\u003e getUploadedFilesByType(java.lang.String type);\n\n\tjava.util.List\u003cjava.io.File\u003e getUploadedFiles();\n\n\tjava.io.File getUploadDirectory();\n\n\tjava.io.File getUploadDirectory(javax.servlet.http.HttpServletRequest request);\n\n\tjava.lang.String getUploadDirectoryPath();\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [],
    "fields": [
      "private final int cluedo_game.BoardImage.WIDTH",
      "private final int cluedo_game.BoardImage.HEIGHT",
      "private final int cluedo_game.BoardImage.BOARDHEIGHT",
      "private final int cluedo_game.BoardImage.BOARDWIDTH",
      "private final int cluedo_game.BoardImage.step",
      "BufferedImage cluedo_game.BoardImage.bi",
      "private final Color cluedo_game.BoardImage.PURPLE",
      "private JButton[] cluedo_game.BoardImage.weaponArray",
      "private ArrayList cluedo_game.BoardImage.weaponRoomLocations",
      "private JPanel cluedo_game.BoardImage.imagePanel",
      "private JButton[][] cluedo_game.BoardImage.defaultBoard",
      "private JButton[][] cluedo_game.BoardImage.editedBoard",
      "static int[] cluedo_game.BoardImage.whiteindex",
      "static int[] cluedo_game.BoardImage.greenindex",
      "static int[] cluedo_game.BoardImage.peacockindex",
      "static int[] cluedo_game.BoardImage.mustardindex",
      "static int[] cluedo_game.BoardImage.plumindex",
      "static int[] cluedo_game.BoardImage.scarletindex"
    ],
    "imports": [
      "java.awt.*",
      "java.awt.event.*",
      "java.awt.image.BufferedImage",
      "javax.swing.*",
      "java.io.File",
      "java.io.IOException",
      "java.io.InputStream",
      "java.net.URL",
      "java.util.ArrayList",
      "javax.imageio.ImageIO"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 43,
        "name": "highlightMovement(movement)",
        "parameters": [
          "int movement"
        ],
        "returnType": "JPanel",
        "sourceCode": [
          "//TODO: Implement",
          "\t\t// Movement represents how many squares the player gets to move",
          "\t\t// player coordinates i, j",
          "//\t\tint i = ",
          "\t\t//Gotta find the upper and lower bounds ",
          "\t\t// if (i + movement \u003e board size x){",
          "\t\t// \t\tupper bound x = board size x;",
          "\t\t// }",
          "\t\t// else{",
          "\t\t// \t\tupper bound x = i + movement;",
          "\t\t// }",
          "\t\t//",
          "\t\t// if (j + movement \u003e board size y){",
          "\t\t// \t\tupper bound y = board size y;",
          "\t\t// }",
          "\t\t// else{",
          "\t\t// \t\tupper bound y = j + movement ;",
          "\t\t// }",
          "\t\t// ",
          "\t\t// if (i - movement \u003c 0){",
          "\t\t// \t\tlower bound = 0;",
          "\t\t// }",
          "\t\t// else{",
          "\t\t// \t\tlower bound = i - movement;",
          "\t\t// }",
          "\t\t// if (j - movement \u003c 0){",
          "\t\t// \t\tlower bound = 0;",
          "\t\t// }",
          "\t\t// else{",
          "\t\t// \t\tlower bound = j - movement;",
          "\t\t// }",
          "\t\t//",
          "\t\t// for (int x=lower bound x;x\u003c=upper bound x;x++){",
          "\t\t// \t\tfor (int y=lower bound y;y\u003c=upper bound y;y++){",
          "\t\t//\t\t\tif (x+y-(i+j)\u003emovement){",
          "\t\t//\t\t\t\tuse this square",
          "\t\t//\t\t\t}",
          "\t\t//\t\t\telse{",
          "\t\t//\t\t\t\tdon\u0027t use this square",
          "\t\t//\t\t\t}",
          "\t\t//\t\t}",
          "\t\t// }",
          "\t\treturn null;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 19,
        "name": "returnPanel()",
        "parameters": [],
        "returnType": "JPanel",
        "sourceCode": [
          "try {",
          "\t\t\tURL imageUrl = this.getClass().getResource(\u0022board1.jpg\u0022);",
          "\t\t\tbi = ImageIO.read(imageUrl);",
          "\t\t} catch (Exception resourceLoadException){",
          "\t\t\tSystem.err.println(\u0022Unable to find default map file in file system...trying to fetch it from imgur...\u0022);",
          "\t\t\ttry {",
          "\t\t\t\tURL url = new URL(\u0022https://i.imgur.com/7eO9OJA.jpg\u0022);",
          "\t\t\t\tbi = ImageIO.read(url);",
          "\t\t\t\tSystem.out.println(\u0022Uh oh\u0022);",
          "\t\t\t}",
          "\t\t\tcatch (Exception q) {",
          "\t\t\t\tSystem.err.println(\u0022Unable to find image file in local system AND has no connection to imgur\u0022);",
          "\t\t\t}",
          "\t\t}",
          "\t\tJPanel p = this.returnEmptyGridLayout();",
          "\t\tp = this.populateGrid(p);",
          "\t\tJPanel holder = this.returnFinalJPanel();",
          "\t\tholder.add(p);",
          "\t\treturn holder;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getImagePanel()",
        "parameters": [],
        "returnType": "JPanel",
        "sourceCode": [
          "return imagePanel;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "returnEmptyGridLayout()",
        "parameters": [],
        "returnType": "JPanel",
        "sourceCode": [
          "/* Creating JPanel -- will represent the grid that will overly the image */",
          "        JPanel p = new JPanel(new GridLayout(25,24));",
          "        p.setOpaque(false);",
          "        return p;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 49,
        "name": "populateGrid(p)",
        "parameters": [
          "JPanel p"
        ],
        "returnType": "JPanel",
        "sourceCode": [
          "/* Var to print the number of times we have created the grid */",
          "        int count = 0;",
          "        /* vars that deal e */",
          "        int xIndex = 0;",
          "        int yIndex = 0;",
          "        /* Loop that goes through the given image, splitting it up, the  */",
          "        for (int ii=0; ii\u003cHEIGHT; ii+=step) {",
          "        \t/* Need to lay it out like this, otherwise we set some spaces between the JButtons */",
          "            yIndex = 0;",
          "        \tfor (int jj=0; jj\u003cWIDTH; jj+=step) {",
          "            \t/* Getting the sub-image of the given BufferedImage */",
          "            \t//System.out.println(\u0022Getting subimage coords: \u0022 + jj + \u0022, \u0022 + \u0022, \u0022 + ii + \u0022, \u0022 +step + \u0022, \u0022+ step);",
          "                Image icon = bi.getSubimage(jj, ii, step, step);",
          "                /* Creating the button that will will have the image of this current section of the map*/",
          "                JButton button = new JButton(new ImageIcon(icon));",
          "                /* remove the border - indicate action using a different icon */",
          "                button.setBorder(null);//THIS IS IMPORTANT BECAUSE IT COMBINES THE SUB",
          "                /* Making a pressed icon, otherwise the user would get no \u0027feedback\u0027 from the program */",
          "                BufferedImage iconPressed = new BufferedImage(step,step,BufferedImage.TYPE_INT_ARGB);",
          "                /* Making sure that the pressed button looks the same as the old one -- besides the green outline  */",
          "                Graphics g = iconPressed.getGraphics();",
          "                g.drawImage(icon, 0, 0, p);",
          "                g.setColor(Color.RED);",
          "                g.drawRoundRect(0, 0, iconPressed.getWidth(p)-1, iconPressed.getHeight(p)-1, 12, 12);",
          "                g.dispose();",
          "                button.setPressedIcon(new ImageIcon(iconPressed));",
          "                //button.setActionCommand(\u0022\u0022+xIndex+\u0022,\u0022+yIndex);",
          "\t\t\t\t//TODO: Josh uncomment this if you need it, I was de-cluttering the console printouts",
          "\t\t\t\tbutton.setActionCommand(\u0022\u0022+xIndex+\u0022,\u0022+yIndex);",
          "                button.addActionListener(new ActionListener(){",
          "                /* What happens when we press the button? */",
          "                @Override",
          "                  public void actionPerformed(ActionEvent ae) {",
          "                         System.out.println(ae.getActionCommand());",
          "                  }",
          "                });",
          "                /* Adding the button to the p JPanel */",
          "                this.defaultBoard[xIndex][yIndex] = button;",
          "                this.editedBoard[xIndex][yIndex] = button;",
          "                count++;",
          "                yIndex++;",
          "                /* Adding button to panel -- doesn\u0027t really matter that we add this now because this is an un-edited board */",
          "                //p.add(button);",
          "             }",
          "            /* Incrementing array counters */",
          "            xIndex++;",
          "        }",
          "\t\tdrawForTheFistTime(p);",
          "\t\treturn p;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 9,
        "name": "move(init, fin)",
        "parameters": [
          "int[] init",
          "int[] fin"
        ],
        "returnType": "JPanel",
        "sourceCode": [
          "//Check to see if you\u0027re about to move on an entry square",
          "\t\tif (GameLogic.currentBoard.getSquare(fin) instanceof EntrySquare){",
          "//\t\t\tSystem.out.println(\u0022[\u0022+fin[0]+\u0022,\u0022+fin[1]+\u0022] is an entry square \u0022 + GameLogic.currentBoard.getSquare(fin).getClass());",
          "\t\t\treturn null;",
          "\t\t}",
          "\t\telse{",
          "//\t\t\tSystem.out.println(\u0022[\u0022+fin[0]+\u0022,\u0022+fin[1]+\u0022] is a \u0022 + GameLogic.currentBoard.getSquare(fin).getClass());",
          "\t\t\treturn swapsquares(init, fin);",
          "\t\t}"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 6,
        "name": "passageMove(player, roomfrom, roomto)",
        "parameters": [
          "Token player",
          "Room roomfrom",
          "Room roomto"
        ],
        "returnType": "JPanel",
        "sourceCode": [
          "System.out.println(player.getName() + \u0022 \u0022 +player.getPreviousRoom().getName() + \u0022 \u0022 + player.getInRoom().getName()); ",
          "\t\tint[] init = roomfrom.getPlayerFloors().get(player.getPreviousPlayerFloor());",
          "\t\tSystem.out.println(init[0]+ \u0022 , \u0022 + init[1]);",
          "\t\tint[] fin = roomto.getPlayerFloors().get(roomto.getPlayerSpotInRoom(player));",
          "\t\tplayer.setPreviousPlayerFloor(roomto.getPlayerSpotInRoom(player));",
          "\t\treturn swapsquares(init, fin);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "moveToRoom(player, init, room)",
        "parameters": [
          "Token player",
          "int[] init",
          "Room room"
        ],
        "returnType": "JPanel",
        "sourceCode": [
          "player.setPreviousPlayerFloor(room.getPlayerSpotInRoom(player));",
          "\t\tint[] fin = room.getPlayerFloors().get(room.getPlayerSpotInRoom(player));",
          "\t\tplayer.setIsInRoom(true);",
          "\t\treturn swapsquares(init, fin);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 3,
        "name": "movetoExit(player, fin, room)",
        "parameters": [
          "Token player",
          "int[] fin",
          "Room room"
        ],
        "returnType": "JPanel",
        "sourceCode": [
          "int[] init = room.getPlayerFloors().get(player.getPreviousPlayerFloor());",
          "\t\tplayer.setIsInRoom(false);",
          "\t\treturn swapsquares(init, fin);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 21,
        "name": "swapsquares(init, fin)",
        "parameters": [
          "int[] init",
          "int[] fin"
        ],
        "returnType": "JPanel",
        "sourceCode": [
          "/* Creating new JPanel -- set = to an empty layout */",
          "\t\t//System.out.println(\u0022Init: [\u0022+init[0]+\u0022,\u0022+init[1]+\u0022] Fin: [\u0022+fin[0] + \u0022,\u0022 + fin[1] + \u0022]\u0022);",
          "\t\tJPanel newPanel = returnEmptyGridLayout();",
          "\t\tJPanel returnMe = returnFinalJPanel();",
          "\t\tif ((init!=null)\u0026\u0026(fin!=null)){//Safety, can be called null",
          "\t\t\t/* Assigning the colour of the new JButton */",
          "\t\t\tthis.editedBoard[fin[0]][fin[1]] = this.editedBoard[init[0]][init[1]];",
          "\t\t\t/* Returning the old JButton to its original colour */",
          "\t\t\tthis.editedBoard[init[0]][init[1]] = this.defaultBoard[init[0]][init[1]];",
          "\t\t\t/* Need to recreate the JPanel based on the new *, int finX */",
          "\t\t\tfor (int rows = 0; rows \u003c 25; rows++) {",
          "\t\t\t\tfor (int cols = 0; cols \u003c 24; cols++) {",
          "\t\t\t\t\t/* This *should* correctly re-add the JButtons to the JPanel */",
          "\t\t\t\t\tJButton temp = this.editedBoard[rows][cols];",
          "\t\t\t\t\ttemp.setBorder(null);",
          "\t\t\t\t\tnewPanel.add(temp);",
          "\t\t\t\t}",
          "\t\t\t}",
          "\t\t\treturnMe.add(newPanel);",
          "\t\t}",
          "\t\treturn returnMe;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 20,
        "name": "resetSquare(square)",
        "parameters": [
          "int[] square"
        ],
        "returnType": "JPanel",
        "sourceCode": [
          "/* Creating new JPanel -- set = to an empty layout */",
          "\t\t//System.out.println(\u0022Init: [\u0022+init[0]+\u0022,\u0022+init[1]+\u0022] Fin: [\u0022+fin[0] + \u0022,\u0022 + fin[1] + \u0022]\u0022);",
          "\t\tJPanel newPanel = returnEmptyGridLayout();",
          "\t\tJPanel returnMe = returnFinalJPanel();",
          "\t\tSystem.out.println(square[0] + \u0022 \u0022 + square[1]);",
          "\t\tif (square!=null){//Safety, can be called null",
          "\t\t\t/* Returning the old JButton to its original colour */",
          "\t\t\tthis.editedBoard[square[0]][square[1]] = this.defaultBoard[square[0]][square[1]];",
          "\t\t\t/* Need to recreate the JPanel based on the new *, int finX */",
          "\t\t\tfor (int rows = 0; rows \u003c 25; rows++) {",
          "\t\t\t\tfor (int cols = 0; cols \u003c 24; cols++) {",
          "\t\t\t\t\t/* This *should* correctly re-add the JButtons to the JPanel */",
          "\t\t\t\t\tJButton temp = this.editedBoard[rows][cols];",
          "\t\t\t\t\ttemp.setBorder(null);",
          "\t\t\t\t\tnewPanel.add(temp);",
          "\t\t\t\t}",
          "\t\t\t}",
          "\t\t\treturnMe.add(newPanel);",
          "\t\t}",
          "\t\treturn returnMe;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "removePlayer(player)",
        "parameters": [
          "Token player"
        ],
        "returnType": "JPanel",
        "sourceCode": [
          "return resetSquare(player.getPosition());"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 2,
        "name": "removeFromCellar()",
        "parameters": [],
        "returnType": "JPanel",
        "sourceCode": [
          "int[] init = {13,12};",
          "\t\treturn resetSquare(init);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 13,
        "name": "refreshMe()",
        "parameters": [],
        "returnType": "JPanel",
        "sourceCode": [
          "JPanel newPanel = returnEmptyGridLayout();",
          "\t\tJPanel returnMe = returnFinalJPanel();",
          "\t\t/* Need to recreate the JPanel based on the new */",
          "\t\tfor (int rows = 0; rows \u003c 25; rows++) {",
          "\t\t\tfor (int cols = 0; cols \u003c 24; cols++) {",
          "\t\t\t\t/* This *should* correctly re-add the JButtons to the JPanel */",
          "\t\t\t\tJButton temp = this.editedBoard[rows][cols];",
          "\t\t\t\ttemp.setBorder(null);",
          "\t\t\t\tnewPanel.add(temp);",
          "\t\t\t}",
          "\t\t}",
          "\t\treturnMe.add(newPanel);",
          "\t\treturn returnMe;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 42,
        "name": "initPlayers()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "//White",
          "\t\tJButton white = new JButton();",
          "\t\twhite.setBorder(null);",
          "\t\twhite.setBackground(Color.WHITE);",
          "\t\twhite.setOpaque(true);",
          "\t\twhite.setBorderPainted(false);",
          "\t\teditedBoard[0][9]=white;",
          "\t\t//Green",
          "\t\tJButton green = new JButton();",
          "\t\tgreen.setBorder(null);",
          "\t\tgreen.setBackground(Color.GREEN);",
          "\t\tgreen.setOpaque(true);",
          "\t\tgreen.setBorderPainted(false);",
          "\t\teditedBoard[0][14]=green;",
          "\t\t//Peacock",
          "\t\tJButton peacock = new JButton();",
          "\t\tpeacock.setBorder(null);",
          "\t\tpeacock.setBackground(Color.BLUE);",
          "\t\tpeacock.setOpaque(true);",
          "\t\tpeacock.setBorderPainted(false);",
          "\t\teditedBoard[6][23]=peacock;",
          "\t\t//Mustard",
          "\t\tJButton mustard = new JButton();",
          "\t\tmustard.setBorder(null);",
          "\t\tmustard.setBackground(Color.YELLOW);",
          "\t\tmustard.setOpaque(true);",
          "\t\tmustard.setBorderPainted(false);",
          "\t\teditedBoard[17][0]=mustard;",
          "\t\t//Plum",
          "\t\tJButton plum = new JButton();",
          "\t\tplum.setBorder(null);",
          "\t\tplum.setBackground(PURPLE);",
          "\t\tplum.setOpaque(true);",
          "\t\tplum.setBorderPainted(false);",
          "\t\teditedBoard[19][23]=plum;",
          "\t\t//Scarlet",
          "\t\tJButton scarlet = new JButton();",
          "\t\tscarlet.setBorder(null);",
          "\t\tscarlet.setBackground(Color.RED);",
          "\t\tscarlet.setOpaque(true);",
          "\t\tscarlet.setBorderPainted(false);",
          "\t\teditedBoard[24][7]=scarlet;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 88,
        "name": "initWeapons()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "weaponArray = new JButton[6];",
          "\t\t/*",
          "\t\tSetting up the coordinates in this way will make it easier to randomize them",
          "\t\t */",
          "\t\tint[] kitchenWeaponLocation = {4, 2};",
          "\t\tint[] ballroomWeaponLocation = {5, 12};",
          "\t\tint[] conservatoryWeaponLocation = {3, 21};",
          "\t\tint[] diningRoomWeaponLocation = {12, 3};",
          "\t\tint[] billiardRoomWeaponLocation = {10, 21};",
          "\t\tint[] libraryWeaponLocation = {16, 20};",
          "\t\tint[] loungeWeaponLocation = {21, 3};",
          "\t\tint[] hallWeaponLocation = {21, 12};",
          "\t\tint[] studyWeaponLocation = {22, 20};",
          "\t\tint[][] weaponRoomLocations = new int[9][];",
          "\t\t\tweaponRoomLocations[0] = kitchenWeaponLocation;",
          "\t\t\tweaponRoomLocations[1] = ballroomWeaponLocation;",
          "\t\t\tweaponRoomLocations[2] = conservatoryWeaponLocation;",
          "\t\t\tweaponRoomLocations[3] = diningRoomWeaponLocation;",
          "\t\t\tweaponRoomLocations[4] = billiardRoomWeaponLocation;",
          "\t\t\tweaponRoomLocations[5] = libraryWeaponLocation;",
          "\t\t\tweaponRoomLocations[6] = loungeWeaponLocation;",
          "\t\t\tweaponRoomLocations[7] = hallWeaponLocation;",
          "\t\t\tweaponRoomLocations[8] = studyWeaponLocation;",
          "\t\t/*",
          "\t\tBuild array of weapon JButtons and place them onto the board (not randomly yet)",
          "\t\tThis is messy but gets the job done for now",
          "\t\tTODO: Write a more elegant way to stick the weapons onto the board, and connect it with BoardBuilder",
          "\t\t */",
          "\t\t//Wrench",
          "\t\tJButton wrench = new JButton();",
          "\t\twrench.setBorder(null);",
          "\t\twrench.setBackground(Color.BLACK);",
          "\t\twrench.setText(\u0022W\u0022);",
          "\t\twrench.setForeground(Color.WHITE);",
          "\t\twrench.setOpaque(true);",
          "\t\twrench.setBorderPainted(false);",
          "\t\tweaponArray[0] = wrench;",
          "\t\teditedBoard[kitchenWeaponLocation[0]][kitchenWeaponLocation[1]] = weaponArray[0];",
          "\t\t//Rope",
          "\t\tJButton rope = new JButton();",
          "\t\trope.setBorder(null);",
          "\t\trope.setBackground(Color.BLACK);",
          "\t\trope.setText(\u0022R\u0022);",
          "\t\trope.setForeground(Color.WHITE);",
          "\t\trope.setOpaque(true);",
          "\t\trope.setBorderPainted(false);",
          "\t\tweaponArray[1] = rope;",
          "\t\teditedBoard[ballroomWeaponLocation[0]][ballroomWeaponLocation[1]] = weaponArray[1];",
          "\t\t//Candlestick",
          "\t\tJButton candlestick = new JButton();",
          "\t\tcandlestick.setBorder(null);",
          "\t\tcandlestick.setBackground(Color.BLACK);",
          "\t\tcandlestick.setText(\u0022C\u0022);",
          "\t\tcandlestick.setForeground(Color.WHITE);",
          "\t\tcandlestick.setOpaque(true);",
          "\t\tcandlestick.setBorderPainted(false);",
          "\t\tweaponArray[2] = candlestick;",
          "\t\teditedBoard[conservatoryWeaponLocation[0]][conservatoryWeaponLocation[1]] = weaponArray[2];",
          "\t\t//Pipe",
          "\t\tJButton pipe = new JButton();",
          "\t\tpipe.setBorder(null);",
          "\t\tpipe.setBackground(Color.BLACK);",
          "\t\tpipe.setText(\u0022P\u0022);",
          "\t\tpipe.setForeground(Color.WHITE);",
          "\t\tpipe.setOpaque(true);",
          "\t\tpipe.setBorderPainted(false);",
          "\t\tweaponArray[3] = pipe;",
          "\t\teditedBoard[diningRoomWeaponLocation[0]][diningRoomWeaponLocation[1]] = weaponArray[3];",
          "\t\t//Gun - using this instead of revolver so I can represent it with \u0027G\u0027 since Rope is \u0027R\u0027",
          "\t\tJButton gun = new JButton();",
          "\t\tgun.setBorder(null);",
          "\t\tgun.setBackground(Color.BLACK);",
          "\t\tgun.setText(\u0022G\u0022);",
          "\t\tgun.setForeground(Color.WHITE);",
          "\t\tgun.setOpaque(true);",
          "\t\tgun.setBorderPainted(false);",
          "\t\tweaponArray[4] = gun;",
          "\t\teditedBoard[billiardRoomWeaponLocation[0]][billiardRoomWeaponLocation[1]] = weaponArray[4];",
          "\t\t//Dagger",
          "\t\tJButton dagger = new JButton();",
          "\t\tdagger.setBorder(null);",
          "\t\tdagger.setBackground(Color.BLACK);",
          "\t\tdagger.setText(\u0022D\u0022);",
          "\t\tdagger.setForeground(Color.WHITE);",
          "\t\tdagger.setOpaque(true);",
          "\t\tdagger.setBorderPainted(false);",
          "\t\tweaponArray[5] = dagger;",
          "\t\teditedBoard[libraryWeaponLocation[0]][libraryWeaponLocation[1]] = weaponArray[5];"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 7,
        "name": "drawForTheFistTime(p)",
        "parameters": [
          "JPanel p"
        ],
        "returnType": "void",
        "sourceCode": [
          "initPlayers();",
          "\t\tinitWeapons();",
          "\t\tfor (int i=0;i\u003c25;i++){",
          "\t\t\tfor (int j=0;j\u003c24;j++){",
          "\t\t\t\tp.add(editedBoard[i][j]);",
          "\t\t\t}",
          "\t\t}"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "returnFinalJPanel()",
        "parameters": [],
        "returnType": "JPanel",
        "sourceCode": [
          "/* Put the first JPanel in this one -- GridBagLayout messes with the spacing to make it look nicer */",
          "        JPanel center = new JPanel(new GridBagLayout());",
          "        center.setBackground(Color.BLACK);",
          "        return center;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "returnDefultBoard()",
        "parameters": [],
        "returnType": "JButton[][]",
        "sourceCode": [
          "return this.defaultBoard;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "returnEditedBoard()",
        "parameters": [],
        "returnType": "JButton[][]",
        "sourceCode": [
          "return this.editedBoard;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 11,
        "name": "testMe(bi)",
        "parameters": [
          "BufferedImage bi"
        ],
        "returnType": "void",
        "sourceCode": [
          "JFrame frame = new JFrame(\u0022Test BufferedImage\u0022);",
          "\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);",
          "\t\tthis.bi = bi;",
          "\t\tJPanel p = this.returnEmptyGridLayout();",
          "\t\tp = this.populateGrid(p);",
          "\t\t/* Setting frame size -- Will be removed */",
          "\t\tframe.setSize(WIDTH,HEIGHT);",
          "\t\tframe.setVisible(true);",
          "\t\tJPanel holder = this.returnFinalJPanel();",
          "\t\tholder.add(p);",
          "\t\tframe.add(holder);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 9,
        "name": "main(args)",
        "parameters": [
          "String[] args"
        ],
        "returnType": "void",
        "sourceCode": [
          "BufferedImage test = null;",
          "        BoardImage testMe = new BoardImage();",
          "        try {",
          "            test = ImageIO.read(new File(\u0022board1.jpg\u0022));",
          "        }",
          "        catch (IOException e) {",
          "            e.printStackTrace();",
          "        }",
          "        testMe.testMe(test);"
        ]
      }
    ],
    "name": "BoardImage",
    "packageName": "cluedo_game",
    "smellReports": {},
    "sourceCode": "package cluedo_game;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.awt.image.BufferedImage;\nimport javax.swing.*;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport javax.imageio.ImageIO;\n\npublic class BoardImage {\n\n\tprivate final int WIDTH = 552;\n\n\tprivate final int HEIGHT = 575;\n\n\tprivate final int BOARDHEIGHT = 25;\n\n\tprivate final int BOARDWIDTH = 24;\n\n\tprivate final int step = 23;\n\n\tjava.awt.image.BufferedImage bi = //Incrementer for for loop to correctly move to next square,size of each square\n\t ;\n\n\tprivate final java.awt.Color PURPLE = new Color(75, 0, 130);\n\n\tprivate javax.swing.JButton[] weaponArray =  // Poor Professor Plum should get his own color, too\n\n\t  ;\n\n\tprivate java.util.ArrayList\u003cjava.lang.Integer[]\u003e weaponRoomLocations = \n\t  ;\n\n\tprivate javax.swing.JPanel imagePanel = \n\n\t  ;\n\n\tprivate javax.swing.JButton[][] defaultBoard = new JButton[BOARDHEIGHT][BOARDWIDTH];\n\n\tprivate javax.swing.JButton[][] editedBoard = new JButton[BOARDHEIGHT][BOARDWIDTH];\n\n\tstatic int[] whiteindex = {0,9};\n\n\tstatic int[] greenindex = {0,14};\n\n\tstatic int[] peacockindex = {6,23};\n\n\tstatic int[] mustardindex = {17,0};\n\n\tstatic int[] plumindex = {19,23};\n\n\tstatic int[] scarletindex = {24,7};\n\n\t/**\n\t * returns a panel that can be added to a JFrame\n\t *\n\t * @return a JPanel that holds the buffered image\n\t */\n\tpublic javax.swing.JPanel highlightMovement(int movement) {\n\t\n\t\t//TODO: Implement\n\t\t// Movement represents how many squares the player gets to move\n\t\t// player coordinates i, j\n//\t\tint i = \n\t\t\n\t\t//Gotta find the upper and lower bounds \n\t\t// if (i + movement \u003e board size x){\n\t\t// \t\tupper bound x = board size x;\n\t\t// }\n\t\t// else{\n\t\t// \t\tupper bound x = i + movement;\n\t\t// }\n\t\t//\n\t\t// if (j + movement \u003e board size y){\n\t\t// \t\tupper bound y = board size y;\n\t\t// }\n\t\t// else{\n\t\t// \t\tupper bound y = j + movement ;\n\t\t// }\n\t\t// \n\t\t// if (i - movement \u003c 0){\n\t\t// \t\tlower bound = 0;\n\t\t// }\n\t\t// else{\n\t\t// \t\tlower bound = i - movement;\n\t\t// }\n\t\t// if (j - movement \u003c 0){\n\t\t// \t\tlower bound = 0;\n\t\t// }\n\t\t// else{\n\t\t// \t\tlower bound = j - movement;\n\t\t// }\n\t\t//\n\t\t// for (int x=lower bound x;x\u003c=upper bound x;x++){\n\t\t// \t\tfor (int y=lower bound y;y\u003c=upper bound y;y++){\n\t\t//\t\t\tif (x+y-(i+j)\u003emovement){\n\t\t//\t\t\t\tuse this square\n\t\t//\t\t\t}\n\t\t//\t\t\telse{\n\t\t//\t\t\t\tdon\u0027t use this square\n\t\t//\t\t\t}\n\t\t//\t\t}\n\t\t// }\n\t\n\t\treturn null;\n\t}\n\n\tpublic javax.swing.JPanel returnPanel() {\n\t\n\t\ttry {\n\t\t\tURL imageUrl = this.getClass().getResource(\u0022board1.jpg\u0022);\n\t\t\tbi = ImageIO.read(imageUrl);\n\t\t} catch (Exception resourceLoadException){\n\t\t\tSystem.err.println(\u0022Unable to find default map file in file system...trying to fetch it from imgur...\u0022);\n\t\t\ttry {\n\t\t\t\tURL url = new URL(\u0022https://i.imgur.com/7eO9OJA.jpg\u0022);\n\t\t\t\tbi = ImageIO.read(url);\n\t\t\t\tSystem.out.println(\u0022Uh oh\u0022);\n\t\t\t}\n\t\t\tcatch (Exception q) {\n\t\t\t\tSystem.err.println(\u0022Unable to find image file in local system AND has no connection to imgur\u0022);\n\t\t\t}\n\t\t}\n\n\t\tJPanel p = this.returnEmptyGridLayout();\n\t\tp = this.populateGrid(p);\n\n\t\tJPanel holder = this.returnFinalJPanel();\n\t\tholder.add(p);\n\t\treturn holder;\n\t}\n\n\tpublic javax.swing.JPanel getImagePanel() {\n\t\n\t\treturn imagePanel;\n\t}\n\n\t/**\n\t * Constructs an empty grid, places it in a JPanel and returns it\n\t *\n\t * @return a JPanel with an empty grid layout -- will be filled with JButtons later\n\t */\n\tprivate javax.swing.JPanel returnEmptyGridLayout() {\n\t\n        /* Creating JPanel -- will represent the grid that will overly the image */\n        JPanel p = new JPanel(new GridLayout(25,24));\n        p.setOpaque(false);\n        return p;\n\t}\n\n\t/**\n\t * method that populates a JPanel with an array of buttons, which are colored with the image of the BufferedImage defined earlier\n\t *\n\t * @param p the JPanel to be populated\n\t * @return The JPanel after populating with buttons\n\t */\n\tprivate javax.swing.JPanel populateGrid(javax.swing.JPanel p) {\n\t\n        /* Var to print the number of times we have created the grid */\n        int count = 0;\n\n        /* vars that deal e */\n        int xIndex = 0;\n        int yIndex = 0;\n\n        /* Loop that goes through the given image, splitting it up, the  */\n        for (int ii=0; ii\u003cHEIGHT; ii+=step) {\n        \t/* Need to lay it out like this, otherwise we set some spaces between the JButtons */\n            yIndex = 0;\n        \tfor (int jj=0; jj\u003cWIDTH; jj+=step) {\n            \t/* Getting the sub-image of the given BufferedImage */\n            \t//System.out.println(\u0022Getting subimage coords: \u0022 + jj + \u0022, \u0022 + \u0022, \u0022 + ii + \u0022, \u0022 +step + \u0022, \u0022+ step);\n                Image icon = bi.getSubimage(jj, ii, step, step);\n\n                /* Creating the button that will will have the image of this current section of the map*/\n                JButton button = new JButton(new ImageIcon(icon));\n\n                /* remove the border - indicate action using a different icon */\n                button.setBorder(null);//THIS IS IMPORTANT BECAUSE IT COMBINES THE SUB\n\n                /* Making a pressed icon, otherwise the user would get no \u0027feedback\u0027 from the program */\n                BufferedImage iconPressed = new BufferedImage(step,step,BufferedImage.TYPE_INT_ARGB);\n                /* Making sure that the pressed button looks the same as the old one -- besides the green outline  */\n                Graphics g = iconPressed.getGraphics();\n                g.drawImage(icon, 0, 0, p);\n                g.setColor(Color.RED);\n                g.drawRoundRect(0, 0, iconPressed.getWidth(p)-1, iconPressed.getHeight(p)-1, 12, 12);\n                g.dispose();\n                button.setPressedIcon(new ImageIcon(iconPressed));\n\n\n                //button.setActionCommand(\u0022\u0022+xIndex+\u0022,\u0022+yIndex);\n\n\t\t\t\t//TODO: Josh uncomment this if you need it, I was de-cluttering the console printouts\n\t\t\t\tbutton.setActionCommand(\u0022\u0022+xIndex+\u0022,\u0022+yIndex);\n                button.addActionListener(new ActionListener(){\n\n                /* What happens when we press the button? */\n                @Override\n                  public void actionPerformed(ActionEvent ae) {\n                         System.out.println(ae.getActionCommand());\n                  }\n                });\n\n                /* Adding the button to the p JPanel */\n                this.defaultBoard[xIndex][yIndex] = button;\n                this.editedBoard[xIndex][yIndex] = button;\n\n                count++;\n                yIndex++;\n                /* Adding button to panel -- doesn\u0027t really matter that we add this now because this is an un-edited board */\n                //p.add(button);\n             }\n\n            /* Incrementing array counters */\n            xIndex++;\n        }\n\t\tdrawForTheFistTime(p);\n\t\treturn p;\n\t}\n\n\tpublic javax.swing.JPanel move(int[] init, int[] fin) {\n\t\n\t\t//Check to see if you\u0027re about to move on an entry square\n\t\tif (GameLogic.currentBoard.getSquare(fin) instanceof EntrySquare){\n//\t\t\tSystem.out.println(\u0022[\u0022+fin[0]+\u0022,\u0022+fin[1]+\u0022] is an entry square \u0022 + GameLogic.currentBoard.getSquare(fin).getClass());\n\t\t\treturn null;\n\t\t}\n\t\telse{\n//\t\t\tSystem.out.println(\u0022[\u0022+fin[0]+\u0022,\u0022+fin[1]+\u0022] is a \u0022 + GameLogic.currentBoard.getSquare(fin).getClass());\n\t\t\treturn swapsquares(init, fin);\n\t\t}\n\t}\n\n\tpublic javax.swing.JPanel passageMove(Token player, Room roomfrom, Room roomto) {\n\t\n\t\tSystem.out.println(player.getName() + \u0022 \u0022 +player.getPreviousRoom().getName() + \u0022 \u0022 + player.getInRoom().getName()); \n\t\tint[] init = roomfrom.getPlayerFloors().get(player.getPreviousPlayerFloor());\n\t\tSystem.out.println(init[0]+ \u0022 , \u0022 + init[1]);\n\t\tint[] fin = roomto.getPlayerFloors().get(roomto.getPlayerSpotInRoom(player));\n\t\tplayer.setPreviousPlayerFloor(roomto.getPlayerSpotInRoom(player));\n\t\treturn swapsquares(init, fin);\n\n\t}\n\n\tpublic javax.swing.JPanel moveToRoom(Token player, int[] init, Room room) {\n\t\n\t\tplayer.setPreviousPlayerFloor(room.getPlayerSpotInRoom(player));\n\t\tint[] fin = room.getPlayerFloors().get(room.getPlayerSpotInRoom(player));\n\t\tplayer.setIsInRoom(true);\n\t\treturn swapsquares(init, fin);\n\t}\n\n\tpublic javax.swing.JPanel movetoExit(Token player, int[] fin, Room room) {\n\t\n\t\tint[] init = room.getPlayerFloors().get(player.getPreviousPlayerFloor());\n\t\tplayer.setIsInRoom(false);\n\t\treturn swapsquares(init, fin);\n\t}\n\n\tpublic javax.swing.JPanel swapsquares(int[] init, int[] fin) {\n\t\n\t\t/* Creating new JPanel -- set = to an empty layout */\n\t\t//System.out.println(\u0022Init: [\u0022+init[0]+\u0022,\u0022+init[1]+\u0022] Fin: [\u0022+fin[0] + \u0022,\u0022 + fin[1] + \u0022]\u0022);\n\t\tJPanel newPanel = returnEmptyGridLayout();\n\t\tJPanel returnMe = returnFinalJPanel();\n\n\t\tif ((init!=null)\u0026\u0026(fin!=null)){//Safety, can be called null\n\t\t\t/* Assigning the colour of the new JButton */\n\t\t\tthis.editedBoard[fin[0]][fin[1]] = this.editedBoard[init[0]][init[1]];\n\n\t\t\t/* Returning the old JButton to its original colour */\n\t\t\tthis.editedBoard[init[0]][init[1]] = this.defaultBoard[init[0]][init[1]];\n\n\t\t\t/* Need to recreate the JPanel based on the new *, int finX */\n\t\t\tfor (int rows = 0; rows \u003c 25; rows++) {\n\t\t\t\tfor (int cols = 0; cols \u003c 24; cols++) {\n\t\t\t\t\t/* This *should* correctly re-add the JButtons to the JPanel */\n\t\t\t\t\tJButton temp = this.editedBoard[rows][cols];\n\t\t\t\t\ttemp.setBorder(null);\n\t\t\t\t\tnewPanel.add(temp);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturnMe.add(newPanel);\n\t\t}\n\t\treturn returnMe;\n\t}\n\n\tpublic javax.swing.JPanel resetSquare(int[] square) {\n\t\n\t\t/* Creating new JPanel -- set = to an empty layout */\n\t\t//System.out.println(\u0022Init: [\u0022+init[0]+\u0022,\u0022+init[1]+\u0022] Fin: [\u0022+fin[0] + \u0022,\u0022 + fin[1] + \u0022]\u0022);\n\t\tJPanel newPanel = returnEmptyGridLayout();\n\t\tJPanel returnMe = returnFinalJPanel();\n\t\tSystem.out.println(square[0] + \u0022 \u0022 + square[1]);\n\t\t\t\n\t\tif (square!=null){//Safety, can be called null\n\t\t\t/* Returning the old JButton to its original colour */\n\t\t\tthis.editedBoard[square[0]][square[1]] = this.defaultBoard[square[0]][square[1]];\n\n\t\t\t/* Need to recreate the JPanel based on the new *, int finX */\n\t\t\tfor (int rows = 0; rows \u003c 25; rows++) {\n\t\t\t\tfor (int cols = 0; cols \u003c 24; cols++) {\n\t\t\t\t\t/* This *should* correctly re-add the JButtons to the JPanel */\n\t\t\t\t\tJButton temp = this.editedBoard[rows][cols];\n\t\t\t\t\ttemp.setBorder(null);\n\t\t\t\t\tnewPanel.add(temp);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturnMe.add(newPanel);\n\t\t}\n\t\treturn returnMe;\n\t}\n\n\tpublic javax.swing.JPanel removePlayer(Token player) {\n\t\n\t\treturn resetSquare(player.getPosition());\n\t}\n\n\tpublic javax.swing.JPanel removeFromCellar() {\n\t\n\t\tint[] init = {13,12};\n\t\treturn resetSquare(init);\n\t}\n\n\tpublic javax.swing.JPanel refreshMe() {\n\t\n\t\tJPanel newPanel = returnEmptyGridLayout();\n\t\tJPanel returnMe = returnFinalJPanel();\n\n\t\t/* Need to recreate the JPanel based on the new */\n\t\tfor (int rows = 0; rows \u003c 25; rows++) {\n\t\t\tfor (int cols = 0; cols \u003c 24; cols++) {\n\t\t\t\t/* This *should* correctly re-add the JButtons to the JPanel */\n\t\t\t\tJButton temp = this.editedBoard[rows][cols];\n\t\t\t\ttemp.setBorder(null);\n\t\t\t\tnewPanel.add(temp);\n\t\t\t}\n\t\t}\n\t\treturnMe.add(newPanel);\n\n\t\treturn returnMe;\n\t}\n\n\tpublic void initPlayers() {\n\t\n\t\t//White\n\t\tJButton white = new JButton();\n\t\twhite.setBorder(null);\n\t\twhite.setBackground(Color.WHITE);\n\t\twhite.setOpaque(true);\n\t\twhite.setBorderPainted(false);\n\t\teditedBoard[0][9]=white;\n\t\t//Green\n\t\tJButton green = new JButton();\n\t\tgreen.setBorder(null);\n\t\tgreen.setBackground(Color.GREEN);\n\t\tgreen.setOpaque(true);\n\t\tgreen.setBorderPainted(false);\n\t\teditedBoard[0][14]=green;\n\t\t//Peacock\n\t\tJButton peacock = new JButton();\n\t\tpeacock.setBorder(null);\n\t\tpeacock.setBackground(Color.BLUE);\n\t\tpeacock.setOpaque(true);\n\t\tpeacock.setBorderPainted(false);\n\t\teditedBoard[6][23]=peacock;\n\t\t//Mustard\n\t\tJButton mustard = new JButton();\n\t\tmustard.setBorder(null);\n\t\tmustard.setBackground(Color.YELLOW);\n\t\tmustard.setOpaque(true);\n\t\tmustard.setBorderPainted(false);\n\t\teditedBoard[17][0]=mustard;\n\t\t//Plum\n\t\tJButton plum = new JButton();\n\t\tplum.setBorder(null);\n\t\tplum.setBackground(PURPLE);\n\t\tplum.setOpaque(true);\n\t\tplum.setBorderPainted(false);\n\t\teditedBoard[19][23]=plum;\n\t\t//Scarlet\n\t\tJButton scarlet = new JButton();\n\t\tscarlet.setBorder(null);\n\t\tscarlet.setBackground(Color.RED);\n\t\tscarlet.setOpaque(true);\n\t\tscarlet.setBorderPainted(false);\n\t\teditedBoard[24][7]=scarlet;\n\t}\n\n\t/**\n\t * This is a very messy method that initializes board squares where the weapons are located for visual\n * representation. It puts those coordinates in an array, then builds an array of weapon JButtons and\n * puts those JButtons into random rooms.\n\t */\n\tpublic void initWeapons() {\n\t\n\t\tweaponArray = new JButton[6];\n\t\t/*\n\t\tSetting up the coordinates in this way will make it easier to randomize them\n\t\t */\n\t\tint[] kitchenWeaponLocation = {4, 2};\n\t\tint[] ballroomWeaponLocation = {5, 12};\n\t\tint[] conservatoryWeaponLocation = {3, 21};\n\t\tint[] diningRoomWeaponLocation = {12, 3};\n\t\tint[] billiardRoomWeaponLocation = {10, 21};\n\t\tint[] libraryWeaponLocation = {16, 20};\n\t\tint[] loungeWeaponLocation = {21, 3};\n\t\tint[] hallWeaponLocation = {21, 12};\n\t\tint[] studyWeaponLocation = {22, 20};\n\n\t\tint[][] weaponRoomLocations = new int[9][];\n\t\t\tweaponRoomLocations[0] = kitchenWeaponLocation;\n\t\t\tweaponRoomLocations[1] = ballroomWeaponLocation;\n\t\t\tweaponRoomLocations[2] = conservatoryWeaponLocation;\n\t\t\tweaponRoomLocations[3] = diningRoomWeaponLocation;\n\t\t\tweaponRoomLocations[4] = billiardRoomWeaponLocation;\n\t\t\tweaponRoomLocations[5] = libraryWeaponLocation;\n\t\t\tweaponRoomLocations[6] = loungeWeaponLocation;\n\t\t\tweaponRoomLocations[7] = hallWeaponLocation;\n\t\t\tweaponRoomLocations[8] = studyWeaponLocation;\n\n\t\t/*\n\t\tBuild array of weapon JButtons and place them onto the board (not randomly yet)\n\t\tThis is messy but gets the job done for now\n\t\tTODO: Write a more elegant way to stick the weapons onto the board, and connect it with BoardBuilder\n\t\t */\n\t\t//Wrench\n\t\tJButton wrench = new JButton();\n\t\twrench.setBorder(null);\n\t\twrench.setBackground(Color.BLACK);\n\t\twrench.setText(\u0022W\u0022);\n\t\twrench.setForeground(Color.WHITE);\n\t\twrench.setOpaque(true);\n\t\twrench.setBorderPainted(false);\n\t\tweaponArray[0] = wrench;\n\t\teditedBoard[kitchenWeaponLocation[0]][kitchenWeaponLocation[1]] = weaponArray[0];\n\t\t//Rope\n\t\tJButton rope = new JButton();\n\t\trope.setBorder(null);\n\t\trope.setBackground(Color.BLACK);\n\t\trope.setText(\u0022R\u0022);\n\t\trope.setForeground(Color.WHITE);\n\t\trope.setOpaque(true);\n\t\trope.setBorderPainted(false);\n\t\tweaponArray[1] = rope;\n\t\teditedBoard[ballroomWeaponLocation[0]][ballroomWeaponLocation[1]] = weaponArray[1];\n\t\t//Candlestick\n\t\tJButton candlestick = new JButton();\n\t\tcandlestick.setBorder(null);\n\t\tcandlestick.setBackground(Color.BLACK);\n\t\tcandlestick.setText(\u0022C\u0022);\n\t\tcandlestick.setForeground(Color.WHITE);\n\t\tcandlestick.setOpaque(true);\n\t\tcandlestick.setBorderPainted(false);\n\t\tweaponArray[2] = candlestick;\n\t\teditedBoard[conservatoryWeaponLocation[0]][conservatoryWeaponLocation[1]] = weaponArray[2];\n\t\t//Pipe\n\t\tJButton pipe = new JButton();\n\t\tpipe.setBorder(null);\n\t\tpipe.setBackground(Color.BLACK);\n\t\tpipe.setText(\u0022P\u0022);\n\t\tpipe.setForeground(Color.WHITE);\n\t\tpipe.setOpaque(true);\n\t\tpipe.setBorderPainted(false);\n\t\tweaponArray[3] = pipe;\n\t\teditedBoard[diningRoomWeaponLocation[0]][diningRoomWeaponLocation[1]] = weaponArray[3];\n\t\t//Gun - using this instead of revolver so I can represent it with \u0027G\u0027 since Rope is \u0027R\u0027\n\t\tJButton gun = new JButton();\n\t\tgun.setBorder(null);\n\t\tgun.setBackground(Color.BLACK);\n\t\tgun.setText(\u0022G\u0022);\n\t\tgun.setForeground(Color.WHITE);\n\t\tgun.setOpaque(true);\n\t\tgun.setBorderPainted(false);\n\t\tweaponArray[4] = gun;\n\t\teditedBoard[billiardRoomWeaponLocation[0]][billiardRoomWeaponLocation[1]] = weaponArray[4];\n\t\t//Dagger\n\t\tJButton dagger = new JButton();\n\t\tdagger.setBorder(null);\n\t\tdagger.setBackground(Color.BLACK);\n\t\tdagger.setText(\u0022D\u0022);\n\t\tdagger.setForeground(Color.WHITE);\n\t\tdagger.setOpaque(true);\n\t\tdagger.setBorderPainted(false);\n\t\tweaponArray[5] = dagger;\n\t\teditedBoard[libraryWeaponLocation[0]][libraryWeaponLocation[1]] = weaponArray[5];\n\t}\n\n\tpublic void drawForTheFistTime(javax.swing.JPanel p) {\n\t\n\t\tinitPlayers();\n\t\tinitWeapons();\n\t\tfor (int i=0;i\u003c25;i++){\n\t\t\tfor (int j=0;j\u003c24;j++){\n\t\t\t\tp.add(editedBoard[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * returns JPanel that will be used to hold the JPanel of buttons\n\t *\n\t * @return a formatted JPanel for the board image\n\t */\n\tprivate javax.swing.JPanel returnFinalJPanel() {\n\t\n        /* Put the first JPanel in this one -- GridBagLayout messes with the spacing to make it look nicer */\n        JPanel center = new JPanel(new GridBagLayout());\n        center.setBackground(Color.BLACK);\n        return center;\n\t}\n\n\t/**\n\t * returnDefaultBoard\n\t *\n\t * @return the default array of JButtons\n\t */\n\tpublic javax.swing.JButton[][] returnDefultBoard() {\n\t\n\t\treturn this.defaultBoard;\n\t}\n\n\t/**\n\t * returnEditedBoard\n\t *\n\t * @return the edited array of JButtons\n\t */\n\tpublic javax.swing.JButton[][] returnEditedBoard() {\n\t\n\t\treturn this.editedBoard;\n\t}\n\n\t/**\n\t * test method that tests with the default map\n\t *\n\t * @param bi a buffered image to load into the class variable\n\t */\n\tpublic void testMe(java.awt.image.BufferedImage bi) {\n\t\n\t\tJFrame frame = new JFrame(\u0022Test BufferedImage\u0022);\n\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n\t\tthis.bi = bi;\n\n\t\tJPanel p = this.returnEmptyGridLayout();\n\t\tp = this.populateGrid(p);\n\n\t\t/* Setting frame size -- Will be removed */\n\t\tframe.setSize(WIDTH,HEIGHT);\n\t\tframe.setVisible(true);\n\n\t\tJPanel holder = this.returnFinalJPanel();\n\t\tholder.add(p);\n\t\tframe.add(holder);\n\n\t}\n\n\t/**\n\t * Tester Class\n\t *\n\t * @param args command-line arguments\n\t * @throws IOException Exception thrown if unable to load the image\n\t */\n\tpublic static void main(java.lang.String[] args) throws java.io.IOException {\n\t\n\n        BufferedImage test = null;\n        BoardImage testMe = new BoardImage();\n\n        try {\n            test = ImageIO.read(new File(\u0022board1.jpg\u0022));\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n        testMe.testMe(test);\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public org.wasps.data.repository.concretes.ParsedRepository()"
    ],
    "fields": [],
    "imports": [
      "org.wasps.model.ParsedClass"
    ],
    "interface": false,
    "methods": [],
    "name": "ParsedRepository",
    "packageName": "org.wasps.data.repository.concretes",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.concretes;\n\nimport org.wasps.model.ParsedClass;\n\npublic class ParsedRepository extends org.wasps.data.repository.concretes.Repository\u003corg.wasps.model.ParsedClass\u003e {\n\n\tpublic ParsedRepository() {\n\t\n        super();\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public cluedo_game.Deck()",
      "public cluedo_game.Deck(int)"
    ],
    "fields": [
      "private ArrayList cluedo_game.Deck.publicDeck",
      "private ArrayList cluedo_game.Deck.fullDeck",
      "private ArrayList cluedo_game.Deck.murderEnvelope",
      "private Card cluedo_game.Deck.first"
    ],
    "imports": [
      "java.io.File",
      "java.io.IOException",
      "java.util.ArrayList",
      "java.util.Random",
      "javax.imageio.ImageIO"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getCardByReference(reference)",
        "parameters": [
          "int[] reference"
        ],
        "returnType": "Card",
        "sourceCode": [
          "return publicDeck.get(reference[0]).get(reference[1]);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getCardByReference(ref1, ref2)",
        "parameters": [
          "int ref1",
          "int ref2"
        ],
        "returnType": "Card",
        "sourceCode": [
          "return publicDeck.get(ref1).get(ref2);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 5,
        "name": "getSubDeckSimplified(index)",
        "parameters": [
          "int index"
        ],
        "returnType": "ArrayList",
        "sourceCode": [
          "ArrayList\u003cCard\u003e simplifiedSubDeck = publicDeck.get(index);",
          "        for (Card c : simplifiedSubDeck) {",
          "            c.setName(c.getName());",
          "        }",
          "        return simplifiedSubDeck;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getSubDeck(index)",
        "parameters": [
          "int index"
        ],
        "returnType": "ArrayList",
        "sourceCode": [
          "return publicDeck.get(index);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 7,
        "name": "getDeckSimplified()",
        "parameters": [],
        "returnType": "ArrayList",
        "sourceCode": [
          "ArrayList\u003cArrayList\u003cCard\u003e\u003e simplified = publicDeck;",
          "        for (int i = 0; i \u003c 3; i++) {",
          "            for (Card c : simplified.get(i)) {",
          "                c.setName(c.getName());",
          "            }",
          "        }",
          "        return simplified;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getPublicDeck()",
        "parameters": [],
        "returnType": "ArrayList",
        "sourceCode": [
          "return publicDeck;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 5,
        "name": "getFullPublicDeck()",
        "parameters": [],
        "returnType": "ArrayList",
        "sourceCode": [
          "ArrayList\u003cCard\u003e deck = new ArrayList\u003c\u003e();",
          "        for (int i = 0; i \u003c 3; i++) {",
          "            deck.addAll(publicDeck.get(i));",
          "        }",
          "        return deck;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 7,
        "name": "getPlayerCardByName(name)",
        "parameters": [
          "String name"
        ],
        "returnType": "Card",
        "sourceCode": [
          "name = AcceptedUserInputs.simpleString(name);",
          "        for (Card c : fullDeck.get(0)) {",
          "            if (AcceptedUserInputs.simpleString(c.name).equals",
          "                    (AcceptedUserInputs.simpleString(name)))",
          "                return c;",
          "        }",
          "        return null;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 6,
        "name": "getRoomCardByName(name)",
        "parameters": [
          "String name"
        ],
        "returnType": "Card",
        "sourceCode": [
          "for (Card c : fullDeck.get(1)) {",
          "            if (AcceptedUserInputs.simpleString(c.name).equals",
          "                    (AcceptedUserInputs.simpleString(name)))",
          "                return c;",
          "        }",
          "        return null;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 7,
        "name": "getWeaponCardByName(name)",
        "parameters": [
          "String name"
        ],
        "returnType": "Card",
        "sourceCode": [
          "name = AcceptedUserInputs.simpleString(name);",
          "        for (Card c : fullDeck.get(2)) {",
          "            if (AcceptedUserInputs.simpleString(c.name).equals",
          "                    (AcceptedUserInputs.simpleString(name)))",
          "                return c;",
          "        }",
          "        return null;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getMurderEnvelope()",
        "parameters": [],
        "returnType": "ArrayList",
        "sourceCode": [
          "return murderEnvelope;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "totalSize()",
        "parameters": [],
        "returnType": "int",
        "sourceCode": [
          "return publicDeck.get(0).size() + publicDeck.get(1).size() + publicDeck.get(2).size();"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "size(index)",
        "parameters": [
          "int index"
        ],
        "returnType": "int",
        "sourceCode": [
          "return publicDeck.get(index).size();"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 13,
        "name": "remove(reference)",
        "parameters": [
          "int[] reference"
        ],
        "returnType": "Card",
        "sourceCode": [
          "Card card = null;",
          "        int index = 0;",
          "        for (Card c : publicDeck.get(reference[0])) {",
          "            if (c.reference == reference) {",
          "                card = c;",
          "                break;",
          "            }",
          "            index++;",
          "        }",
          "        if (card == null)",
          "            throw new CardNotFoundException();",
          "        publicDeck.get(reference[0]).remove(index);",
          "        return card;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 6,
        "name": "fillMurderEnvelope()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "Random rand = new Random();",
          "        int randIndex;",
          "        for (int i = 0; i \u003c 3; i++) {",
          "            randIndex = rand.nextInt(6 + (3 * i % 2));",
          "            murderEnvelope.add(publicDeck.get(i).remove(randIndex));",
          "        }"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 36,
        "name": "dealHands(list)",
        "parameters": [
          "Tokens list"
        ],
        "returnType": "void",
        "sourceCode": [
          "// Put all cards in one ArrayList for easier traversal",
          "        ArrayList\u003cCard\u003e fullDeck = new ArrayList\u003c\u003e();",
          "        fullDeck.addAll(publicDeck.get(0));",
          "        fullDeck.addAll(publicDeck.get(1));",
          "        fullDeck.addAll(publicDeck.get(2));",
          "        /*",
          "            Find size of each player\u0027s hand",
          "                Number of cards remaining (usually 18) minus number of cards",
          "                    that won\u0027t divide evenly into number of players, then",
          "                    divided by number of players.",
          "                Example: 18 cards, 4 players.",
          "                    18%4 = 2, 18-2=16 so 4 players get 4 cards.",
          "                    Remaining 2 cards are public",
          "         */",
          "        int handSize = ((this.totalSize() -",
          "                this.totalSize() % list.getNumberOfPlayers()) / list.getNumberOfPlayers());",
          "        // Generate a random seed",
          "        Random rand = new Random();",
          "        int randValue;",
          "        Card card;",
          "        /*",
          "            Iterate through each player as many times as needed to distribute",
          "                cards up to handSize",
          "         */",
          "        for (int i = 0; i \u003c handSize; i++) {",
          "            for (int j = 0; j \u003c list.getNumberOfPlayers(); j++) {",
          "                // Random value bounded by number of cards left",
          "                randValue = rand.nextInt(fullDeck.size());",
          "                card = fullDeck.get(randValue);",
          "                // Add that randomized card to given player\u0027s hand",
          "                list.getPlayerByIndex(j).addCardToHand(card);",
          "                // Remove card from publicDecks",
          "                this.remove(card.reference);",
          "                fullDeck.remove(randValue);",
          "            }",
          "        }"
        ]
      }
    ],
    "name": "Deck",
    "packageName": "cluedo_game",
    "smellReports": {},
    "sourceCode": "package cluedo_game;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport javax.imageio.ImageIO;\n\n/**\n * Data structure which holds Card objects as a modified ArrayList\n * See Card usage notes\n */\npublic class Deck {\n\n\tprivate java.util.ArrayList\u003cjava.util.ArrayList\u003cCard\u003e\u003e publicDeck = new ArrayList\u003c\u003e();\n\n\tprivate java.util.ArrayList\u003cjava.util.ArrayList\u003cCard\u003e\u003e fullDeck = new ArrayList\u003c\u003e();\n\n\tprivate java.util.ArrayList\u003cCard\u003e murderEnvelope = new ArrayList\u003c\u003e();\n\n\tprivate Card first = \n      ;\n\n\tpublic Deck() {\n\t\n        publicDeck.add(new ArrayList\u003c\u003e());\n        publicDeck.get(0).add(new Card(\u0022White\u0022, 0, 0, \u0022token\u0022, CardImages.getBufferedWhite()));\n\t\tpublicDeck.get(0).add(new Card(\u0022Green\u0022, 0, 1, \u0022token\u0022, CardImages.getBufferedGreen()));\n\t\tpublicDeck.get(0).add(new Card(\u0022Mustard\u0022, 0, 2, \u0022token\u0022, CardImages.getBufferedMustard()));\n\t\tpublicDeck.get(0).add(new Card(\u0022Scarlet\u0022, 0, 3, \u0022token\u0022, CardImages.getBufferedScarlet()));\n\t\tpublicDeck.get(0).add(new Card(\u0022Peacock\u0022, 0, 4, \u0022token\u0022, CardImages.getBufferedPeacock()));\n\t\tpublicDeck.get(0).add(new Card(\u0022Plum\u0022, 0, 5, \u0022token\u0022, CardImages.getBufferedPlum()));\n\n\t\tpublicDeck.add(new ArrayList\u003c\u003e());\n\t\tpublicDeck.get(1).add(new Card(\u0022Kitchen\u0022, 1, 0, \u0022room\u0022, CardImages.getBufferedKitchen()));\n\t\tpublicDeck.get(1).add(new Card(\u0022Ball Room\u0022, 1, 1, \u0022room\u0022, CardImages.getBufferedBallroom()));\n\t\tpublicDeck.get(1).add(new Card(\u0022Conservatory\u0022, 1, 2, \u0022room\u0022, CardImages.getBufferedConservatory()));\n\t\tpublicDeck.get(1).add(new Card(\u0022Dining Room\u0022, 1, 3, \u0022room\u0022, CardImages.getBufferedDiningroom()));\n\t\tpublicDeck.get(1).add(new Card(\u0022Billiard Room\u0022, 1, 4, \u0022room\u0022, CardImages.getBufferedBilliardroom()));\n\t\tpublicDeck.get(1).add(new Card(\u0022Library\u0022, 1, 5, \u0022room\u0022, CardImages.getBufferedLibrary()));\n\t\tpublicDeck.get(1).add(new Card(\u0022Lounge\u0022, 1, 6, \u0022room\u0022, CardImages.getBufferedLounge()));\n\t\tpublicDeck.get(1).add(new Card(\u0022Hall\u0022, 1, 7, \u0022room\u0022, CardImages.getBufferedHall()));\n\t\tpublicDeck.get(1).add(new Card(\u0022Study\u0022, 1, 8, \u0022room\u0022, CardImages.getBufferedStudy()));\n\t\t\n\t\tpublicDeck.add(new ArrayList\u003c\u003e());\n\t\tpublicDeck.get(2).add(new Card(\u0022Candlestick\u0022, 2, 0, \u0022weapon\u0022, CardImages.getBufferedCandlestick()));\n\t\tpublicDeck.get(2).add(new Card(\u0022Dagger\u0022, 2, 1, \u0022weapon\u0022, CardImages.getBufferedDagger()));\n\t\tpublicDeck.get(2).add(new Card(\u0022Pistol\u0022, 2, 2, \u0022weapon\u0022, CardImages.getBufferedPistol()));\n\t\tpublicDeck.get(2).add(new Card(\u0022Pipe\u0022, 2, 3, \u0022weapon\u0022, CardImages.getBufferedPipe()));\n\t\tpublicDeck.get(2).add(new Card(\u0022Rope\u0022, 2, 4, \u0022weapon\u0022, CardImages.getBufferedRope()));\n\t\tpublicDeck.get(2).add(new Card(\u0022Wrench\u0022, 2, 5, \u0022weapon\u0022, CardImages.getBufferedWrench()));\n\n\t\tfirst = publicDeck.get(0).get(0);\n\t\t// Populate full deck\n\t\tfor (int i = 0; i \u003c 3; i++) {\n\t\t    fullDeck.add(new ArrayList\u003c\u003e());\n\t\t    fullDeck.get(i).addAll(publicDeck.get(i));\n\t\t}\n\n    }\n\n\tpublic Deck(int i) {\n\t\n        murderEnvelope = new ArrayList\u003c\u003e();\n        try {\n            murderEnvelope.add(new Card(\u0022White\u0022, 0, 0, \u0022token\u0022, ImageIO.read(new File(\u0022src/characterCards/White.png\u0022))));\n            murderEnvelope.add(new Card(\u0022Study\u0022, 1, 8, \u0022room\u0022, ImageIO.read(new File(\u0022src/roomCards/study.jpeg\u0022))));\n            murderEnvelope.add(new Card(\u0022Pipe\u0022, 2, 3, \u0022weapon\u0022, ImageIO.read(new File(\u0022src/weaponCards/Pipe.png\u0022))));\n        } catch (Exception e) {\n            System.out.println(\u0022Card images weren\u0027t loaded properly\u0022);\n        }\n    }\n\n\tpublic Card getCardByReference(int[] reference) {\n\t\n        return publicDeck.get(reference[0]).get(reference[1]);\n    }\n\n\tpublic Card getCardByReference(int ref1, int ref2) {\n\t\n        return publicDeck.get(ref1).get(ref2);\n    }\n\n\t/**\n\t * @param index index of which card type to get string from\n             0 = Players\n             1 = Rooms\n             2 = Weapons\n\t * @return simpleString version of card type strings\n\t */\n\tpublic java.util.ArrayList\u003cCard\u003e getSubDeckSimplified(int index) {\n\t\n        ArrayList\u003cCard\u003e simplifiedSubDeck = publicDeck.get(index);\n        for (Card c : simplifiedSubDeck) {\n            c.setName(c.getName());\n        }\n        return simplifiedSubDeck;\n    }\n\n\tpublic java.util.ArrayList\u003cCard\u003e getSubDeck(int index) {\n\t\n        return publicDeck.get(index);\n    }\n\n\tpublic java.util.ArrayList\u003cjava.util.ArrayList\u003cCard\u003e\u003e getDeckSimplified() {\n\t\n        ArrayList\u003cArrayList\u003cCard\u003e\u003e simplified = publicDeck;\n        for (int i = 0; i \u003c 3; i++) {\n            for (Card c : simplified.get(i)) {\n                c.setName(c.getName());\n            }\n        }\n        return simplified;\n    }\n\n\tpublic java.util.ArrayList\u003cjava.util.ArrayList\u003cCard\u003e\u003e getPublicDeck() {\n\t\n        return publicDeck;\n    }\n\n\tpublic java.util.ArrayList\u003cCard\u003e getFullPublicDeck() {\n\t\n        ArrayList\u003cCard\u003e deck = new ArrayList\u003c\u003e();\n        for (int i = 0; i \u003c 3; i++) {\n            deck.addAll(publicDeck.get(i));\n        }\n        return deck;\n    }\n\n\tpublic Card getPlayerCardByName(java.lang.String name) {\n\t\n        name = AcceptedUserInputs.simpleString(name);\n        for (Card c : fullDeck.get(0)) {\n            if (AcceptedUserInputs.simpleString(c.name).equals\n                    (AcceptedUserInputs.simpleString(name)))\n                return c;\n        }\n        return null;\n    }\n\n\tpublic Card getRoomCardByName(java.lang.String name) {\n\t\n        for (Card c : fullDeck.get(1)) {\n            if (AcceptedUserInputs.simpleString(c.name).equals\n                    (AcceptedUserInputs.simpleString(name)))\n                return c;\n        }\n        return null;\n    }\n\n\tpublic Card getWeaponCardByName(java.lang.String name) {\n\t\n        name = AcceptedUserInputs.simpleString(name);\n        for (Card c : fullDeck.get(2)) {\n            if (AcceptedUserInputs.simpleString(c.name).equals\n                    (AcceptedUserInputs.simpleString(name)))\n                return c;\n        }\n        return null;\n    }\n\n\tpublic java.util.ArrayList\u003cCard\u003e getMurderEnvelope() {\n\t\n        return murderEnvelope;\n    }\n\n\tpublic int totalSize() {\n\t\n        return publicDeck.get(0).size() + publicDeck.get(1).size() + publicDeck.get(2).size();\n    }\n\n\tpublic int size(int index) {\n\t\n        return publicDeck.get(index).size();\n    }\n\n\tpublic Card remove(int[] reference) {\n\t\n        Card card = null;\n        int index = 0;\n        for (Card c : publicDeck.get(reference[0])) {\n            if (c.reference == reference) {\n                card = c;\n                break;\n            }\n            index++;\n        }\n        if (card == null)\n            throw new CardNotFoundException();\n        publicDeck.get(reference[0]).remove(index);\n\n        return card;\n    }\n\n\tpublic void fillMurderEnvelope() {\n\t\n        Random rand = new Random();\n        int randIndex;\n\n        for (int i = 0; i \u003c 3; i++) {\n            randIndex = rand.nextInt(6 + (3 * i % 2));\n            murderEnvelope.add(publicDeck.get(i).remove(randIndex));\n        }\n    }\n\n\tpublic void dealHands(Tokens list) {\n\t\n        // Put all cards in one ArrayList for easier traversal\n        ArrayList\u003cCard\u003e fullDeck = new ArrayList\u003c\u003e();\n        fullDeck.addAll(publicDeck.get(0));\n        fullDeck.addAll(publicDeck.get(1));\n        fullDeck.addAll(publicDeck.get(2));\n\n        /*\n            Find size of each player\u0027s hand\n                Number of cards remaining (usually 18) minus number of cards\n                    that won\u0027t divide evenly into number of players, then\n                    divided by number of players.\n                Example: 18 cards, 4 players.\n                    18%4 = 2, 18-2=16 so 4 players get 4 cards.\n                    Remaining 2 cards are public\n         */\n        int handSize = ((this.totalSize() -\n                this.totalSize() % list.getNumberOfPlayers()) / list.getNumberOfPlayers());\n\n        // Generate a random seed\n        Random rand = new Random();\n        int randValue;\n\n        Card card;\n        /*\n            Iterate through each player as many times as needed to distribute\n                cards up to handSize\n         */\n        for (int i = 0; i \u003c handSize; i++) {\n            for (int j = 0; j \u003c list.getNumberOfPlayers(); j++) {\n                // Random value bounded by number of cards left\n                randValue = rand.nextInt(fullDeck.size());\n\n                card = fullDeck.get(randValue);\n                // Add that randomized card to given player\u0027s hand\n                list.getPlayerByIndex(j).addCardToHand(card);\n                // Remove card from publicDecks\n                this.remove(card.reference);\n                fullDeck.remove(randValue);\n            }\n        }\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public cluedo_game.UserInterface(Tokens)"
    ],
    "fields": [
      "private JFrame cluedo_game.UserInterface.display",
      "private UserInputBox cluedo_game.UserInterface.in",
      "private JPanel cluedo_game.UserInterface.input",
      "private static JButton cluedo_game.UserInterface.startGameButton",
      "private OutputTextDisplay cluedo_game.UserInterface.out",
      "private JPanel cluedo_game.UserInterface.output",
      "private QuestionMenu cluedo_game.UserInterface.initialQuestion",
      "JPanel cluedo_game.UserInterface.boardImagePanel",
      "static BoardImage cluedo_game.UserInterface.myImg",
      "JLabel[] cluedo_game.UserInterface.PlayerCards",
      "private JPanel cluedo_game.UserInterface.userDisplay",
      "private Token cluedo_game.UserInterface.currentPlayer",
      "private Tokens cluedo_game.UserInterface.playerList",
      "private JButton cluedo_game.UserInterface.questionDoneButton"
    ],
    "imports": [
      "javax.swing.*",
      "java.awt.*",
      "java.awt.event.ActionEvent",
      "java.awt.event.ActionListener",
      "java.awt.event.KeyEvent",
      "java.awt.event.KeyListener",
      "java.util.ArrayList",
      "java.awt.image.BufferedImage",
      "java.net.URL",
      "javax.imageio.ImageIO"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 20,
        "name": "buildGUI()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "// Set frame size to house JPanels",
          "        display.setSize(800, 700);",
          "        display.setTitle(\u0022Cluedo\u0022);",
          "        display.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);",
          "        // BorderLayout for overall JPanel",
          "        userDisplay.setLayout(new BorderLayout());",
          "        // Add the input and output panels in the appropriate positions",
          "        userDisplay.add(input, BorderLayout.SOUTH);",
          "        userDisplay.add(output, BorderLayout.EAST);",
          "        /* Setting the board */",
          "        myImg = new BoardImage();",
          "        boardImagePanel = myImg.returnPanel();",
          "        boardImagePanel = myImg.refreshMe();",
          "        userDisplay.add(boardImagePanel);",
          "        // Add formatted JPanel to the frame",
          "        display.add(userDisplay);",
          "        // Center display",
          "        display.setLocationRelativeTo(null);",
          "        // Make the UI visible",
          "        display.setVisible(true);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getDisplay()",
        "parameters": [],
        "returnType": "JFrame",
        "sourceCode": [
          "return display;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getUserDisplay()",
        "parameters": [],
        "returnType": "JPanel",
        "sourceCode": [
          "return userDisplay;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getBoardImage()",
        "parameters": [],
        "returnType": "BoardImage",
        "sourceCode": [
          "return myImg;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 3,
        "name": "refreshGuiFromUnsuccessfulGuess()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "initialQuestion.revertToRegularDisplay();",
          "        in.inputField.setText(\u0022\u0022);",
          "        in.inputField.requestFocus();"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 5,
        "name": "refreshDisplayForNextTurn(p)",
        "parameters": [
          "Token p"
        ],
        "returnType": "void",
        "sourceCode": [
          "// Tell players whose turn it is",
          "        in.whoseTurnLabel.setText(\u0022     It is now \u0022 + p.getName() + \u0022\u0027s turn. Moves Left: \u0022 + GameLogic.getMovesLeft());",
          "        in.inputField.requestFocus();",
          "        // Update what player is allowed to input",
          "        out.updateAllowedCommandsBasedOnSquare(p);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "setCurrentPlayer(t)",
        "parameters": [
          "Token t"
        ],
        "returnType": "void",
        "sourceCode": [
          "currentPlayer = t;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getCurrentPlayer()",
        "parameters": [],
        "returnType": "Token",
        "sourceCode": [
          "return currentPlayer;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getQuestionGUI()",
        "parameters": [],
        "returnType": "QuestionMenu",
        "sourceCode": [
          "return this.initialQuestion;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getIn()",
        "parameters": [],
        "returnType": "UserInputBox",
        "sourceCode": [
          "return in;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 2,
        "name": "pressStartGameButton()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "startGameButton.doClick();",
          "        in.inputField.requestFocus();"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 3,
        "name": "createQuestionDoneButton()",
        "parameters": [],
        "returnType": "JButton",
        "sourceCode": [
          "JButton button = new JButton();",
          "        button.addActionListener(new questionDoneListener());",
          "        return button;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 2,
        "name": "clearInputField()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "in.inputField.setText(\u0022\u0022);",
          "        in.inputField.requestFocus();"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getOut()",
        "parameters": [],
        "returnType": "OutputTextDisplay",
        "sourceCode": [
          "return out;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 2,
        "name": "attemptToLoadImageFromResourceFolder()",
        "parameters": [],
        "returnType": "BufferedImage",
        "sourceCode": [
          "URL imageUrl = this.getClass().getResource(\u0022board1.jpg\u0022);",
          "        return ImageIO.read(imageUrl);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getInitialQuestion()",
        "parameters": [],
        "returnType": "QuestionMenu",
        "sourceCode": [
          "return initialQuestion;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "removePlayer()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "in.refreshBoard(myImg.removeFromCellar());"
        ]
      }
    ],
    "name": "UserInterface",
    "packageName": "cluedo_game",
    "smellReports": {},
    "sourceCode": "package cluedo_game;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.util.ArrayList;\nimport java.awt.image.BufferedImage;\nimport java.net.URL;\nimport javax.imageio.ImageIO;\n\n/**\n * UserInterface\n * This class is the JFrame that will hold all of the individual JPanels:\n *  Game Board\n *  Input Box\n *  Text Display Box\n */\npublic class UserInterface extends javax.swing.JPanel {\n\n\tprivate javax.swing.JFrame display = new JFrame();\n\n\tprivate cluedo_game.UserInterface.UserInputBox in = new UserInputBox();\n\n\tprivate javax.swing.JPanel input = in.createInputPanel();\n\n\tprivate static javax.swing.JButton startGameButton = \n       ;\n\n\tprivate cluedo_game.UserInterface.OutputTextDisplay out = new OutputTextDisplay();\n\n\tprivate javax.swing.JPanel output = out.createOutputPanel();\n\n\tprivate QuestionMenu initialQuestion = null;\n\n\tjavax.swing.JPanel boardImagePanel = \n\n    // The board image portion of the UI\n     ;\n\n\tstatic cluedo_game.BoardImage myImg = \n      ;\n\n\tjavax.swing.JLabel[] PlayerCards = new JLabel[3];\n\n\tprivate javax.swing.JPanel userDisplay = new JPanel();\n\n\tprivate Token currentPlayer = \n\n    // Pointer to player whose turn it is\n      ;\n\n\tprivate Tokens playerList = \n      ;\n\n\tprivate javax.swing.JButton questionDoneButton = \n\n      ;\n\n\t/**\n\t * The constructor for the UI which will set off a chain of events drawing all of the components\n * Everything so far is done in buildGUI, but when we add game logic it will also(?) be contained here\n\t */\n\tpublic UserInterface(Tokens playerList) {\n\t\n        /* This is going to happen AFTER the start game button is pressed */\n        this.playerList = playerList;\n        this.currentPlayer = playerList.getFirst();\n        this.buildGUI();\n    }\n\n\t/**\n\t * buildGui creates the graphical aspect of the UI\n\t */\n\tpublic void buildGUI() {\n\t\n        // Set frame size to house JPanels\n        display.setSize(800, 700);\n        display.setTitle(\u0022Cluedo\u0022);\n        display.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        // BorderLayout for overall JPanel\n        userDisplay.setLayout(new BorderLayout());\n        // Add the input and output panels in the appropriate positions\n        userDisplay.add(input, BorderLayout.SOUTH);\n        userDisplay.add(output, BorderLayout.EAST);\n        /* Setting the board */\n        myImg = new BoardImage();\n        boardImagePanel = myImg.returnPanel();\n        boardImagePanel = myImg.refreshMe();\n\n        userDisplay.add(boardImagePanel);\n        \n\n        // Add formatted JPanel to the frame\n        display.add(userDisplay);\n\n        // Center display\n        display.setLocationRelativeTo(null);\n\n        // Make the UI visible\n        display.setVisible(true);\n    }\n\n\tpublic javax.swing.JFrame getDisplay() {\n\t\n        return display;\n    }\n\n\tpublic javax.swing.JPanel getUserDisplay() {\n\t\n        return userDisplay;\n    }\n\n\tpublic cluedo_game.BoardImage getBoardImage() {\n\t\n        return myImg;\n    }\n\n\tpublic void refreshGuiFromUnsuccessfulGuess() {\n\t\n        initialQuestion.revertToRegularDisplay();\n        in.inputField.setText(\u0022\u0022);\n        in.inputField.requestFocus();\n    }\n\n\tpublic void refreshDisplayForNextTurn(Token p) {\n\t\n        // Tell players whose turn it is\n        in.whoseTurnLabel.setText(\u0022     It is now \u0022 + p.getName() + \u0022\u0027s turn. Moves Left: \u0022 + GameLogic.getMovesLeft());\n        in.inputField.requestFocus();\n        // Update what player is allowed to input\n        out.updateAllowedCommandsBasedOnSquare(p);\n    }\n\n\tpublic void setCurrentPlayer(Token t) {\n\t\n        currentPlayer = t;\n    }\n\n\tpublic Token getCurrentPlayer() {\n\t\n        return currentPlayer;\n    }\n\n\t/**\n\t * Returns the QuestionMenu Object -- Note that the return type for the array: characterName who we guessed | weapon that was guessed | character who made the guess\n\t *\n\t * @return the most recent questionMenu object that was created, will return null if the user has not asked a question yet\n\t */\n\tpublic QuestionMenu getQuestionGUI() {\n\t\n    \treturn this.initialQuestion;\n    }\n\n\tpublic cluedo_game.UserInterface.UserInputBox getIn() {\n\t\n        return in;\n    }\n\n\tpublic void pressStartGameButton() {\n\t\n        startGameButton.doClick();\n        in.inputField.requestFocus();\n    }\n\n\t/**\n\t * Panels and methods for asking a question\n\t */\n\tprivate javax.swing.JButton createQuestionDoneButton() {\n\t\n        JButton button = new JButton();\n        button.addActionListener(new questionDoneListener());\n        return button;\n    }\n\n\tpublic void clearInputField() {\n\t\n        in.inputField.setText(\u0022\u0022);\n        in.inputField.requestFocus();\n    }\n\n\tpublic cluedo_game.UserInterface.OutputTextDisplay getOut() {\n\t\n        return out;\n    }\n\n\t/**\n\t * attemptToLoadImageFromResourceFolder\n * This method pulls the URL/path from an image name and loads that into a buffered image\n\t *\n\t * @return a buffered image loaded from the hard-coded URL\n\t * @throws Exception Prints a stack trace in boardImagePanel if the image is not found\n\t */\n\tpublic java.awt.image.BufferedImage attemptToLoadImageFromResourceFolder() throws java.lang.Exception {\n\t\n        URL imageUrl = this.getClass().getResource(\u0022board1.jpg\u0022);\n        return ImageIO.read(imageUrl);\n    }\n\n\tpublic QuestionMenu getInitialQuestion() {\n\t\n        return initialQuestion;\n    }\n\n\tpublic void removePlayer() {\n\t\n        in.refreshBoard(myImg.removeFromCellar());\n    }\n\n\t/**\n\t * The user input portion of the GUI\n\t */\n\tprotected class UserInputBox {\n\n\t\tfinal int FIELD_WIDTH = 10;\n\n\t\tprivate javax.swing.JTextField inputField = new JTextField(FIELD_WIDTH);\n\n\t\tprivate javax.swing.JLabel whoseTurnLabel = new JLabel(\u0022     Welcome to Cluedo\u0022);\n\n\t\tprivate javax.swing.JLabel promptLabel = new JLabel(\u0022     Please press start when ready to play.\u0022);\n\n\t\tprivate javax.swing.JButton performActionButton = \n          ;\n\n\t\tprivate javax.swing.JButton exitChoiceButton = \n          ;\n\n\t\tprivate javax.swing.JButton viewNotesButton = \n          ;\n\n\t\tprivate cluedo_game.UserInterface.UserInputBox.StartGameListener returnStartGameListener = \n          ;\n\n\t\tprivate cluedo_game.UserInterface.UserInputBox.UserInputListener returnPressListener = \n          ;\n\n\t\tprivate cluedo_game.UserInterface.UserInputBox.ExitChoiceListener returnPressExitListener = \n          ;\n\n\t\tprivate cluedo_game.UserInterface.UserInputBox.ViewNotesListener returnPressViewNotesListener = \n          ;\n\n\t\tprivate cluedo_game.UserInterface.UserInputBox.ArrowListener arrows = \n          ;\n\n\t\tpublic javax.swing.JPanel createInputPanel() {\n\t\t\n            JPanel input = new JPanel();\n            input.setLayout(new BorderLayout());\n            JButton startGameButton = createStartGameButton();\n            arrows = new ArrowListener();\n\n            input.setBorder(BorderFactory.createEtchedBorder(Color.lightGray, Color.black));\n\n            // Making it so user can press \u0027return\u0027 to \u0027Perform Action\u0027\n            returnPressListener = new UserInputListener();\n            // But at the beginning, pressing \u0027return\u0027 should start the game\n            returnStartGameListener = new StartGameListener();\n            inputField.addActionListener(returnStartGameListener);\n\n            returnPressExitListener = new ExitChoiceListener();\n            returnPressViewNotesListener = new ViewNotesListener();\n\n            input.add(whoseTurnLabel, BorderLayout.NORTH);\n            input.add(promptLabel, BorderLayout.CENTER);\n            input.add(inputField, BorderLayout.SOUTH);\n            input.add(startGameButton, BorderLayout.EAST);\n\n            inputField.requestFocus();\n\n            return input;\n        }\n\n\t\tpublic void refreshBoard(javax.swing.JPanel update) {\n\t\t\n        \tJButton[] currentPlayerCards = new JButton[3];\n            currentPlayerCards[0] = new JButton();\n        \tcurrentPlayerCards[1] = new JButton();\n        \tcurrentPlayerCards[2] = new JButton();\n\n\t\t\tcurrentPlayerCards[0].setBorder(null);\n        \tcurrentPlayerCards[1].setBorder(null);\n        \tcurrentPlayerCards[2].setBorder(null);\n\n        \tcurrentPlayerCards[0].setIcon(new ImageIcon(currentPlayer.getHand().get(0).getImage()));\n\t\t\tcurrentPlayerCards[1].setIcon(new ImageIcon(currentPlayer.getHand().get(1).getImage()));\n\t\t\tcurrentPlayerCards[2].setIcon(new ImageIcon(currentPlayer.getHand().get(2).getImage()));\n\n\t\t\tJPanel cardsPanel = new JPanel(new GridLayout(3,1));\n        \tcardsPanel.add(currentPlayerCards[0]);\n        \tcardsPanel.add(currentPlayerCards[1]);\n        \tcardsPanel.add(currentPlayerCards[2]);\n\n        \tJPanel bigPanel = new JPanel();\n        \tbigPanel.add(cardsPanel);\n        \tbigPanel.add(boardImagePanel);\n\n        \t\n            userDisplay.remove(boardImagePanel);\n            boardImagePanel = update;\n            \n            userDisplay.add(boardImagePanel);\n//            userDisplay.add(bigPanel); //TODO: UNCOMMENT TO DISPLAY CARDS\n            display.invalidate();\n            display.validate();\n            display.repaint();\n        }\n\n\t\t/**\n\t\t * Start button that must be pressed to start the game\n\t\t *\n\t\t * @return the button, to place into a JPanel\n\t\t */\n\t\tprivate javax.swing.JButton createStartGameButton() {\n\t\t\n            startGameButton = new JButton(\u0022Start Game\u0022);\n            ActionListener listener = new StartGameListener();\n            startGameButton.addActionListener(listener);\n\n            return startGameButton;\n        }\n\n\t\tprivate javax.swing.JButton createViewNotesButton() {\n\t\t\n            viewNotesButton = new JButton(\u0022Done\u0022);\n            ActionListener listener = new ViewNotesListener();\n            viewNotesButton.addActionListener(listener);\n\n            return viewNotesButton;\n        }\n\n\t\t/**\n\t\t * Button for the user to press when they enter a command\n\t\t *\n\t\t * @return the button, to place into a JPanel\n\t\t */\n\t\tprivate javax.swing.JButton createPerformActionButton() {\n\t\t\n            JButton performAction = new JButton(\u0022Perform Action\u0022);\n            ActionListener listener = new UserInputListener();\n            performAction.addActionListener(listener);\n\n            return performAction;\n        }\n\n\t\tpublic void switchToExitChoiceButton() {\n\t\t\n            switchInputToExitPicker();\n            out.roomExitChoicesUpdater();\n            input.remove(performActionButton);\n            input.add(createExitPickerButton(), BorderLayout.EAST);\n            inputField.setText(\u0022\u0022);\n\n            input.revalidate();\n            output.revalidate();\n        }\n\n\t\tprivate javax.swing.JButton createExitPickerButton() {\n\t\t\n            exitChoiceButton = new JButton(\u0022Choose Exit\u0022);\n            ActionListener listener = new ExitChoiceListener();\n            exitChoiceButton.addActionListener(listener);\n\n            return exitChoiceButton;\n        }\n\n\t\tpublic cluedo_game.UserInterface.UserInputBox.ExitChoiceListener getNewExitChoiceListener(int i) {\n\t\t\n            return new ExitChoiceListener(i);\n        }\n\n\t\t/**\n\t\t * This method changes the user input panel to reflect choice for exiting a room\n\t\t */\n\t\tpublic void switchInputToExitPicker() {\n\t\t\n            input.remove(promptLabel);\n            inputField.removeActionListener(returnPressListener);\n            inputField.removeKeyListener(arrows);\n            inputField.addActionListener(returnPressExitListener);\n            promptLabel.setText(\u0022     Which exit would you like to take?\u0022);\n            input.add(promptLabel, BorderLayout.CENTER);\n        }\n\n\t\tpublic void switchToViewNotes(java.lang.String in) {\n\t\t\n            // Clear input box no matter what\n            //  but only show notes if game has started\n            if(performActionButton != null \u0026\u0026\n                    performActionButton.getParent() == input) {\n                switchInputToViewNotes();\n                out.viewNotes(in);\n                input.remove(performActionButton);\n                input.add(createViewNotesButton(), BorderLayout.EAST);\n            }\n            inputField.setText(\u0022\u0022);\n            inputField.requestFocus();\n\n            input.revalidate();\n            output.revalidate();\n        }\n\n\t\tprivate void switchInputToViewNotes() {\n\t\t\n            input.remove(promptLabel);\n            inputField.removeActionListener(returnPressListener);\n            inputField.removeKeyListener(arrows);\n            inputField.addActionListener(returnPressViewNotesListener);\n            promptLabel.setText(\u0022     You are viewing your notes.\u0022);\n            input.add(promptLabel, BorderLayout.CENTER);\n            input.revalidate();\n        }\n\n\t\t/**\n\t\t * This method switches back to general user input\n *  It can be called to remove panels for either \u0027exit\u0027 or \u0027notes\u0027/\u0027cheat\u0027\n\t\t */\n\t\tpublic void switchToInput(java.awt.event.ActionListener al, javax.swing.JButton button) {\n\t\t\n            inputField.removeActionListener(al);\n            inputField.addActionListener(returnPressListener);\n            inputField.addKeyListener(arrows);\n            in.inputField.setText(\u0022\u0022);\n            in.inputField.requestFocus();\n            promptLabel.setText(\u0022     What would you like to do?\u0022);\n            input.remove(button);\n            input.add(performActionButton, BorderLayout.EAST);\n            input.revalidate();\n            refreshDisplayForNextTurn(currentPlayer);\n        }\n\n\t\tpublic cluedo_game.UserInterface.UserInputBox.UserInputListener getNewUserInputListener(java.lang.String s) {\n\t\t\n            return new UserInputListener(s);\n        }\n\n\t\tclass StartGameListener implements java.awt.event.ActionListener {\n\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent event) {\n\t\t\t\n                GameLogic.Dice.rollForTurn();\n                input.remove(startGameButton);\n                performActionButton = createPerformActionButton();\n                inputField.removeActionListener(returnStartGameListener);\n                inputField.addActionListener(returnPressListener);\n                inputField.addKeyListener(arrows);\n                input.add(performActionButton, BorderLayout.EAST);\n                whoseTurnLabel.setText(\u0022     It is now \u0022 + currentPlayer.getName() + \u0022\u0027s turn. Moves Left: \u0022\n                        + GameLogic.getMovesLeft());\n                in.promptLabel.setText(\u0022     What would you like to do?\u0022);\n                out.updateAllowedCommandsBasedOnSquare(currentPlayer);\n                inputField.setText(\u0022\u0022);\n                input.revalidate();\n                output.revalidate();\n            }\n\n\t\t}\n\n\t\tclass ViewNotesListener implements java.awt.event.ActionListener {\n\n\t\t\t@java.lang.Override\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\n\t\t\t\n                out.endViewNotes();\n                switchToInput(returnPressViewNotesListener, viewNotesButton);\n            }\n\n\t\t}\n\n\t\tpublic class UserInputListener implements java.awt.event.ActionListener {\n\n\t\t\tjava.lang.String input;\n\n\t\t\tjava.lang.String result;\n\n\t\t\tpublic UserInputListener(java.lang.String input) {\n\t\t\t\n                this.input = input;\n            }\n\n\t\t\tpublic UserInputListener() {\n\t\t\t\n                this.input = \u0022\u0022;\n            }\n\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent event) {\n\t\t\t\n                if (inputField.getText().equals(\u0022\u0022) \u0026\u0026 input.equals(\u0022\u0022)){\n                    inputField.setText(\u0022\u0022);\n                    inputField.requestFocus();\n                    return;\n                }\n\n                // String becomes either text entered or result of button\n                String text;\n\n                // If this method was called from a button\n                if (input.equals(\u0022\u0022)) {\n                    text = AcceptedUserInputs.simpleString(inputField.getText());\n                    result = GameLogic.PlayerEntry.ActionPerformer(currentPlayer, text);\n                }\n                // If this method was called from user entry\n                else {\n                    text = input.toLowerCase();\n                    result = GameLogic.PlayerEntry.ActionPerformer(currentPlayer, text);\n                }\n\n                /* If the user wants to get helpful hints */\n                if (result.equals(\u0022help\u0022)) {\n                \tThread helpThread = new Thread() {\n                \t\t@Override\n                \t\tpublic void run() {\n                \t\t\tthis.setName(\u0022Help Thread\u0022);\n                \t\t\tnew HelpPage(true);\n                \t\t}\n                \t};\n                \thelpThread.start();\n\n                \t/* Closing the thread once it has created the HelpPage object -- the main thread handles the actionListeners anyway */\n                \ttry {\n\t\t\t\t\t\thelpThread.join();\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n                }\n                if (result.equals(\u0022notes\u0022) || result.equals(\u0022cheat\u0022) || result.equals(\u0022log\u0022)){\n                    switchToViewNotes(result);\n                }\n                else {\n                    if (currentPlayer.getLocationAsString().equals(\u0022room\u0022)) {\n                        switch (result) {\n                            // If player has chosen to exit a room, bring up the appropriate prompt if necessary\n                            case \u0022exitChoice\u0022:\n                                /*\n                                Change input and output to handle user input of an exit choice\n                                 */\n                                switchToExitChoiceButton();\n                                return;\n                            case \u0022exit\u0022:\n                                result = (currentPlayer.getName() + \u0022 has exited the room.\u0022);\n                                break;\n                            // If player is making a question, enter the appropriate menu\n                            case \u0022question\u0022:\n\n                                /* Creating a question menu  */\n                                initialQuestion = new QuestionMenu(display, userDisplay, currentPlayer);\n                                currentPlayer.setAskedQuestionInRoom(true);\n                                \n                                display.remove(userDisplay);\n                                display.add(initialQuestion.returnPanel());\n                                display.revalidate();\n                                display.repaint();\n\n                                break;\n                            case \u0022passage\u0022:\n                                //Moves players in ArrayList\u003cToken\u003e Room.playersInRoom, and moves player in boardpanel\n                                currentPlayer.getPreviousRoom().removePlayerFromRoom(currentPlayer);//Removes player from room they were in\n                                currentPlayer.getInRoom().addPlayerToRoom(currentPlayer);\n                                JPanel newBoard = myImg.passageMove(currentPlayer, currentPlayer.getPreviousRoom(), currentPlayer.getInRoom());\n                                currentPlayer.setPreviousRoom(currentPlayer.getInRoom());\n                                refreshBoard(newBoard);\n                                break;\n                        }\n                    }\n\n                    // If the turn was successful, cycle to next turn\n                    if (GameLogic.PlayerEntry.wasTurnSuccessful()) {\n                        if(result.equals(\u0022done\u0022)){\n                            out.updateMoveHistory(currentPlayer.getName() + \u0022 has finished the turn early.\u0022);\n                        }\n                        else {\n                            out.updateMoveHistory(result);\n                            if (currentPlayer.getInRoom() == null) {\n                                System.out.println(\u0022Player:\\t\u0022 + currentPlayer.getName() + \u0022\\tAction: \u0022 + text\n                                        + \u0022\\t\\tNew Location: \u0022 + currentPlayer.getSquareOn().getPositionAsString());\n\n                               int[] currentCoordinates;\n                               int[] destinationCoordinates = currentPlayer.getSquareOn().getPosition();//Since the player has already moved, destination is the \u0022current\u0022 square\n                               JPanel movementPanel = null;\n                               switch (text) {\n                                   case \u0022up\u0022://Since the player has already moved, current is the \u0022previous\u0022 position\n                                   case \u0022u\u0022:\n                                       currentCoordinates = currentPlayer.getSquareOn().getBelow().getPosition();\n                                       movementPanel = myImg.move(currentCoordinates, destinationCoordinates);\n                                       break;\n                                   case \u0022down\u0022:\n                                   case \u0022d\u0022:\n                                        currentCoordinates = currentPlayer.getSquareOn().getAbove().getPosition();\n                                        movementPanel = myImg.move(currentCoordinates, destinationCoordinates);\n                                       break;\n                                   case \u0022left\u0022:\n                                   case \u0022l\u0022:\n                                        currentCoordinates = currentPlayer.getSquareOn().getRight().getPosition();\n                                        movementPanel = myImg.move(currentCoordinates, destinationCoordinates);\n                                        break;\n                                   case \u0022right\u0022:\n                                   case \u0022r\u0022:\n                                        currentCoordinates = currentPlayer.getSquareOn().getLeft().getPosition();\n                                        movementPanel = myImg.move(currentCoordinates, destinationCoordinates);\n                                        break;\n                                   case \u0022exit\u0022:\n                                   case \u0022e\u0022:\n                                        currentPlayer.getPreviousRoom().removePlayerFromRoom(currentPlayer);//Removes player from room they were in\n                                        movementPanel = myImg.movetoExit(currentPlayer, currentPlayer.getSquareOn().getPosition(), currentPlayer.getPreviousRoom());\n                                        currentPlayer.setPreviousRoom(null);\n                                        break;\n                                   default:\n                                       System.out.println(\u0022No direction detected ERROR\u0022);\n                                       break;\n                               }\n                               refreshBoard(movementPanel);\n                               //This next line of code removes the player when you move him\n                               //refreshBoard(myImg.removePlayer(currentPlayer));\n                            }\n                            else {//If the player (In game logic) has already moved into a room\n                                switch (text) {\n                                    case \u0022up\u0022://Since the player has already moved, current is the \u0022previous\u0022 position\n                                    case \u0022u\u0022:\n                                    case \u0022down\u0022:\n                                    case \u0022d\u0022:\n                                    case \u0022left\u0022:\n                                    case \u0022l\u0022:\n                                    case \u0022right\u0022:\n                                    case \u0022r\u0022:\n                                    \tcurrentPlayer.getInRoom().addPlayerToRoom(currentPlayer);//I don\u0027t know if this will work\n                                        JPanel entrancePanel = myImg.moveToRoom(currentPlayer, currentPlayer.getPrevious().getPosition(), currentPlayer.getInRoom());\n                                        currentPlayer.setPreviousRoom(currentPlayer.getInRoom());\n                                        refreshBoard(entrancePanel);\n                                        break;\n                                }\n\n                                // Print action and location to system out\n                                System.out.println(\u0022Player:\\t\u0022 + currentPlayer.getName() + \u0022\\tAction: \u0022 + text\n                                        + \u0022\\t\\tNew Location: \u0022 + currentPlayer.getInRoom().getName());\n                                // Only update move history with player\u0027s room if they aren\u0027t making a question\n                                    // Otherwise it\u0027ll say they\u0027re in the room multiple times.\n                                if (!result.equals(currentPlayer.getName() + \u0022 is making a guess.\u0022))\n                                    out.updateMoveHistory(currentPlayer.getName()\n                                        + \u0022 has entered the \u0022 + currentPlayer.getInRoom().getName());\n                            }\n                        }\n                        // Use GameLogic to decrement dice and check turn status\n                        GameLogic.checkEndOfTurn();\n                    }\n                    // If not successful, show error and do not cycle to next turn\n                        // Error doesn\u0027t show if player viewed notes\n                    else if (!(result.equals(\u0022notes\u0022) || result.equals(\u0022cheat\u0022) || result.equals(\u0022help\u0022) || result.equals(\u0022question\u0022))){\n                        // This will be an error message if move was unsuccessful\n                    \tJOptionPane.showMessageDialog(null, result);\n                    }\n                }\n                GameLogic.PlayerEntry.resetSwitches();\n                inputField.setText(\u0022\u0022);\n                inputField.requestFocus();\n            }\n\n\t\t}\n\n\t\tpublic class ArrowListener implements java.awt.event.KeyListener {\n\n\t\t\t@java.lang.Override\n\t\t\tpublic void keyTyped(java.awt.event.KeyEvent e) {\n\t\t\t\n\n            }\n\n\t\t\t@java.lang.Override\n\t\t\tpublic void keyPressed(java.awt.event.KeyEvent e) {\n\t\t\t\n                String dir = null;\n\n                switch (e.getKeyCode()) {\n                    case KeyEvent.VK_UP:\n                        dir = \u0022u\u0022;\n                        break;\n                    case KeyEvent.VK_DOWN:\n                        dir = \u0022d\u0022;\n                        break;\n                    case KeyEvent.VK_LEFT:\n                        dir = \u0022l\u0022;\n                        break;\n                    case KeyEvent.VK_RIGHT:\n                        dir = \u0022r\u0022;\n                        break;\n                }\n                if (dir != null) {\n                    in.inputField.setText(dir);\n                    performActionButton.doClick();\n                }\n            }\n\n\t\t\t@java.lang.Override\n\t\t\tpublic void keyReleased(java.awt.event.KeyEvent e) {\n\t\t\t\n\n            }\n\n\t\t}\n\n\t\tclass ExitChoiceListener implements java.awt.event.ActionListener {\n\n\t\t\tint exitNumber;\n\n\t\t\tpublic ExitChoiceListener(int num) {\n\t\t\t\n                this.exitNumber = num;\n            }\n\n\t\t\tpublic ExitChoiceListener() {\n\t\t\t\n                this.exitNumber = -1;\n            }\n\n\t\t\t@java.lang.Override\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\n\t\t\t\n                int choice = exitNumber;\n                // Check to ensure the entry was an integer\n                if (choice == -1) {\n                    try {\n                        choice = Integer.valueOf(inputField.getText());\n                    } catch (Exception ex) {\n                        JOptionPane.showMessageDialog(null, \u0022Please enter only an integer value\u0022);\n                    }\n                }\n                // Call method in GameLogic to see if entry was valid for the number of exits\n                GameLogic.PlayerEntry.checkRoomExit(currentPlayer, choice);\n\n                // The checkRoomExit method switches \u0027roomExitCheck\u0027 to true if successful\n                if (GameLogic.PlayerEntry.getRoomExitCheck()) {\n                    int[] coords = currentPlayer.getSquareOn().getPosition();\n                    System.out.println(\u0022Move to \u0022 + coords[0] +\u0022,\u0022+coords[1] + \u0022 to \u0022 + currentPlayer.getPreviousRoom().getName());\n                    currentPlayer.getPreviousRoom().removePlayerFromRoom(currentPlayer);\n                    JPanel complexExitPanel = myImg.movetoExit(currentPlayer, currentPlayer.getSquareOn().getPosition(), currentPlayer.getPreviousRoom());\n                    refreshBoard(complexExitPanel);\n                    currentPlayer.setPreviousRoom(null);//frees up a little memory\n\n                    out.updateMoveHistory(currentPlayer.getName() + \u0022 has exited the room.\u0022);\n                    switchToInput(returnPressExitListener, exitChoiceButton);\n                    if(currentPlayer.getInRoom() == null) {\n                        System.out.println(\u0022Player:\\t\u0022 + currentPlayer.getName() + \u0022\\tAction: Exit \u0022 + choice\n                                + \u0022\\t\\tNew Location: \u0022 + currentPlayer.getSquareOn().getPositionAsString());\n                    }\n                    GameLogic.checkEndOfTurn();\n                }\n            }\n\n\t\t}\n\n\t}\n\n\tclass questionDoneListener implements java.awt.event.ActionListener {\n\n\t\t@java.lang.Override\n\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\n\t\t\n            display.add(userDisplay);\n            display.revalidate();\n        }\n\n\t}\n\n\t/**\n\t * The user output portion of the GUI\n\t */\n\tpublic class OutputTextDisplay {\n\n\t\tjavax.swing.JTextArea moveHistory;\n\n\t\tjavax.swing.JScrollPane scroller;\n\n\t\tjavax.swing.JScrollPane notesScroller;\n\n\t\tjavax.swing.JPanel allowedCommandsDisplay;\n\n\t\tjavax.swing.JLabel locationReadout;\n\n\t\tjavax.swing.JPanel possibleCommandsList;\n\n\t\tpublic OutputTextDisplay() {\n\t\t\n            moveHistory = new JTextArea(\u0022\u0022, 10, 15);\n            moveHistory.setEnabled(false);\n            moveHistory.setLineWrap(true);\n            moveHistory.setForeground(Color.BLACK);\n\n            createAllowedCommandsDisplay();\n\n            /*\n            A static part of the output text display that will update based on where the player is,\n            but stays in the same place at the top of that JPanel.\n             */\n            locationReadout = new JLabel(\u0022\u003chtml\u003eWelcome to Cluedo!\u003cbr/\u003ePossible Commands:\u003c/html\u003e\u0022);\n            locationReadout.setForeground(Color.white);\n            locationReadout.setHorizontalAlignment(JLabel.CENTER);\n            allowedCommandsDisplay.add(locationReadout, BorderLayout.NORTH);\n\n            /*\n            This portion of the output text display is refreshed every turn to display appropriate commands\n            based on whose turn it is and where they are.\n             */\n            possibleCommandsList = new JPanel();\n            possibleCommandsList.setBackground(Color.GRAY);\n            possibleCommandsList.setLayout(new BoxLayout(possibleCommandsList, BoxLayout.Y_AXIS));\n            possibleCommandsList.setBorder(BorderFactory.createEtchedBorder(Color.BLACK, Color.BLACK));\n            allowedCommandsDisplay.add(possibleCommandsList, BorderLayout.CENTER);\n\n            allowedCommandsDisplay.revalidate();\n\n            /*\n            The move history will be in a scrollable window\n             */\n            scroller = new JScrollPane(moveHistory);\n        }\n\n\t\tpublic void createAllowedCommandsDisplay() {\n\t\t\n            allowedCommandsDisplay = new JPanel();\n            allowedCommandsDisplay.setBorder(BorderFactory.createEtchedBorder(Color.BLACK, Color.BLACK));\n            allowedCommandsDisplay.setLayout(new BorderLayout());\n            allowedCommandsDisplay.setOpaque(true);\n            allowedCommandsDisplay.setBackground(Color.GRAY);\n            allowedCommandsDisplay.setForeground(Color.white);\n        }\n\n\t\t/**\n\t\t * updateAllowedCommandsBasedOnSquare\n * When a new player\u0027s turn starts, this method ensures the output text display updates correctly\n * according to what type of square they are on.\n\t\t *\n\t\t * @param p the player whose turn it is\n\t\t */\n\t\tpublic void updateAllowedCommandsBasedOnSquare(Token p) {\n\t\t\n//            System.out.println(\u0022InRoom: \u0022 + p.getInRoom());\n            // The text in the readout depends on what square/room the player is on\n            // p == null is for testing (hopefully), won\u0027t be in the game\n            allowedCommandsDisplay.remove(possibleCommandsList);\n            possibleCommandsList.removeAll();\n            possibleCommandsList.revalidate();\n            possibleCommandsList.repaint();\n            possibleCommandsList.setLayout(new BoxLayout(possibleCommandsList, BoxLayout.Y_AXIS));\n\n            if (p == null) {\n                locationReadout.setText(\u0022Not on the board. Testing?\u0022);\n                return;\n            }\n            else if (p.getSquareOn() instanceof FloorSquare)\n                locationReadout.setText(\u0022\u003chtml\u003eYou are on a Floor square.\u003cbr/\u003ePossible Commands:\u003c/html\u003e\u0022);\n                // This will only be accessed after a player exits the room\n            else if (p.getSquareOn() instanceof WallSquare)\n                locationReadout.setText(\u0022Wall Square? Something went wrong...\u0022);\n            else\n                locationReadout.setText(\u0022\u003chtml\u003eYou are in the \u0022 + p.getInRoom().getName()\n                        + \u0022\u003cbr/\u003ePossible Commands:\u003c/html\u003e\u0022);\n\n            ArrayList\u003cString\u003e options;\n\n            try {\n                 options = (p.getInRoom() == null) ? AcceptedUserInputs.getFloorNavigation()\n                        : AcceptedUserInputs.getRoomNavigation();\n                for (String s : options) {\n                    s = s.substring(0, 1).toUpperCase().concat(s.substring(1));\n                    JButton btn = new JButton(s);\n                    btn.addActionListener(in.getNewUserInputListener(s));\n                    possibleCommandsList.add(btn);\n                    btn.setAlignmentX(JButton.CENTER_ALIGNMENT);\n                }\n            } catch (Exception e) { e.printStackTrace(); }\n\n            // TODO: Debugging for AccuseMenu\n//            JButton accuse = new JButton(\u0022Accuse\u0022);\n//            AccuseMenu menu = new AccuseMenu(display, userDisplay, currentPlayer);\n//            accuse.addActionListener(new ActionListener() {\n//                @Override\n//                public void actionPerformed(ActionEvent e) {\n//                    menu.switchToAccuseMenu();\n//                }\n//            });\n//            possibleCommandsList.add(accuse);\n\n\n            possibleCommandsList.repaint();\n            allowedCommandsDisplay.add(possibleCommandsList);\n            allowedCommandsDisplay.revalidate();\n            allowedCommandsDisplay.repaint();\n        }\n\n\t\tpublic void roomExitChoicesUpdater() {\n\t\t\n            allowedCommandsDisplay.remove(possibleCommandsList);\n            possibleCommandsList.removeAll();\n\n            ArrayList\u003cInteger\u003e choices = AcceptedUserInputs.getRoomExits(currentPlayer.getInRoom());\n\n            possibleCommandsList.setLayout(new BoxLayout(possibleCommandsList, BoxLayout.Y_AXIS));\n\n            for (Integer i : choices) {\n                String s = \u0022Exit \u0022 + i;\n                JButton btn = new JButton(s);\n                btn.addActionListener(in.getNewExitChoiceListener(i));\n                possibleCommandsList.add(btn);\n                btn.setAlignmentX(JButton.CENTER_ALIGNMENT);\n            }\n\n\n            possibleCommandsList.revalidate();\n\n            allowedCommandsDisplay.add(possibleCommandsList);\n            allowedCommandsDisplay.updateUI();\n        }\n\n\t\t/**\n\t\t * IMPORTANT\n * update method is called BEFORE THE GAME LOGIC HAPPENS\n * So when we call the room, or the player\u0027s square, or anything else,\n * WE CALL APPROPRIATE VARIABLES BASED ON WHERE THE PLAYER WAS AT THE START OF THEIR TURN\n\t\t *\n\t\t * @param in String created by PlayerMovementHandler (in GameLogic.PlayerEntry)\n\t\t */\n\t\tpublic void updateMoveHistory(java.lang.String in) {\n\t\t\n            moveHistory.append(in);\n            moveHistory.append(\u0022\\n\\n\u0022);\n\n            // Refresh the panel after updating\n            output.revalidate();\n        }\n\n\t\tpublic javax.swing.JPanel createOutputPanel() {\n\t\t\n            JPanel output = new JPanel();\n            output.setLayout(new GridLayout(2, 1));\n            output.add(scroller);\n            output.add(allowedCommandsDisplay);\n\n            return output;\n        }\n\n\t\tpublic void viewNotes(java.lang.String entry) {\n\t\t\n            JTextArea notes = new JTextArea(\u0022\u0022, 10, 15);\n            notes.setBackground(Color.BLACK);\n            notes.setForeground(Color.WHITE);\n            if(entry.equals(\u0022notes\u0022)) {\n                for (String s : currentPlayer.getNotes())\n                    notes.append(s + \u0022\\n\u0022);\n            }\n            else if(entry.equals(\u0022cheat\u0022)){\n                notes.append(\u0022CHEATER!!!\\n\u0022);\n                for (Card c : GameLogic.deck.getMurderEnvelope())\n                    notes.append(c.toString() + \u0022\\n\u0022);\n            }\n            else if(entry.equals(\u0022log\u0022)) {\n                for (String s : GameLogic.returnGuessArray()) {\n                    notes.append(s + \u0022\\n\u0022);\n                }\n            }\n\n            notesScroller = new JScrollPane(notes);\n            notes.setLineWrap(true);\n            output.removeAll();\n            output.setLayout(new GridLayout(1,1));\n            output.add(notesScroller);\n            output.revalidate();\n            userDisplay.repaint();\n        }\n\n\t\tpublic void endViewNotes() {\n\t\t\n            output.remove(notesScroller);\n            output.setLayout(new GridLayout(2, 1));\n            output.add(scroller);\n            output.add(allowedCommandsDisplay);\n            output.repaint();\n        }\n\n\t}\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public org.wasps.data.repository.concretes.FileUtility(String)"
    ],
    "fields": [
      "private final String org.wasps.data.repository.concretes.FileUtility.UPLOAD_DIRECTORY_NAME",
      "private String org.wasps.data.repository.concretes.FileUtility._uploadDirectoryPath",
      "private File org.wasps.data.repository.concretes.FileUtility._uploadDirectory"
    ],
    "imports": [
      "org.springframework.web.multipart.MultipartFile",
      "org.wasps.data.repository.abstracts.IFileUtility",
      "javax.servlet.http.HttpServletRequest",
      "java.io.File",
      "java.util.Arrays",
      "java.util.List"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 9,
        "name": "createUploadDirectory(request)",
        "parameters": [
          "HttpServletRequest request"
        ],
        "returnType": "File",
        "sourceCode": [
          "_uploadDirectoryPath = request.getServletContext().getRealPath(UPLOAD_DIRECTORY_NAME) + \u0022/\u0022;",
          "        _uploadDirectory = new File(_uploadDirectoryPath);",
          "        if (!_uploadDirectory.exists()) {",
          "            //noinspection ResultOfMethodCallIgnored",
          "            _uploadDirectory.mkdirs();",
          "        } else {",
          "            System.out.println(\u0022DIR\\t\u0022 + _uploadDirectory.getAbsolutePath());",
          "        }",
          "        return _uploadDirectory;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "createUploadFile(directory, name)",
        "parameters": [
          "File directory",
          "String name"
        ],
        "returnType": "File",
        "sourceCode": [
          "return new File(directory.getPath() + \u0022/\u0022 + name);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 8,
        "name": "uploadFile(directory, file)",
        "parameters": [
          "File directory",
          "MultipartFile file"
        ],
        "returnType": "String",
        "sourceCode": [
          "try {",
          "            File transferFile = createUploadFile(directory, file.getOriginalFilename());",
          "            file.transferTo(transferFile);",
          "        } catch (Exception e) {",
          "            e.printStackTrace();",
          "            return \u0022Failure\u0022;",
          "        }",
          "        return \u0022Success\u0022;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 16,
        "name": "uploadAllFiles(directory, files)",
        "parameters": [
          "File directory",
          "MultipartFile[] files"
        ],
        "returnType": "String",
        "sourceCode": [
          "StringBuilder message = new StringBuilder();",
          "        for (MultipartFile file : files) {",
          "            if (file.getOriginalFilename().isEmpty())",
          "                continue;",
          "            try {",
          "                File transferFile = createUploadFile(directory, file.getOriginalFilename());",
          "                file.transferTo(transferFile);",
          "//                System.out.println(\u0022Transfer File Location =\u003e \u0022 + transferFile.getAbsolutePath());",
          "                message.append(\u0022You successfully uploaded file \u0022);",
          "                message.append(file.getOriginalFilename());",
          "                message.append(\u0022\u003cbr /\u003e\u0022);",
          "            } catch (Exception e) {",
          "                return \u0022You failed to upload \u0022 + file.getOriginalFilename() + \u0022 =\u003e \u0022 + e.getMessage();",
          "            }",
          "        }",
          "        return message.toString();"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getUploadedFileByNameAndType(queryName)",
        "parameters": [
          "String queryName"
        ],
        "returnType": "File",
        "sourceCode": [
          "File files[] = _uploadDirectory.listFiles((dir, name) -\u003e name.equalsIgnoreCase(queryName));",
          "        if (files == null)",
          "            return null;",
          "        return files[0];"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getUploadedFilesByType(queryType)",
        "parameters": [
          "String queryType"
        ],
        "returnType": "List",
        "sourceCode": [
          "File files[] = _uploadDirectory.listFiles((dir, name) -\u003e name.endsWith(queryType));",
          "        if (files == null)",
          "            return null;",
          "        return Arrays.asList(files);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getUploadedFiles()",
        "parameters": [],
        "returnType": "List",
        "sourceCode": [
          "File files[] = _uploadDirectory.listFiles();",
          "        if (files == null)",
          "            return null;",
          "        return Arrays.asList(files);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getUploadDirectory()",
        "parameters": [],
        "returnType": "File",
        "sourceCode": [
          "return _uploadDirectory;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 3,
        "name": "getUploadDirectory(request)",
        "parameters": [
          "HttpServletRequest request"
        ],
        "returnType": "File",
        "sourceCode": [
          "if (_uploadDirectory == null || !_uploadDirectory.exists())",
          "            createUploadDirectory(request);",
          "        return _uploadDirectory;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getUploadDirectoryPath()",
        "parameters": [],
        "returnType": "String",
        "sourceCode": [
          "return _uploadDirectoryPath;"
        ]
      }
    ],
    "name": "FileUtility",
    "packageName": "org.wasps.data.repository.concretes",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.concretes;\n\nimport org.springframework.web.multipart.MultipartFile;\nimport org.wasps.data.repository.abstracts.IFileUtility;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.File;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FileUtility implements org.wasps.data.repository.abstracts.IFileUtility {\n\n\tprivate final java.lang.String UPLOAD_DIRECTORY_NAME;\n\n\tprivate java.lang.String _uploadDirectoryPath;\n\n\tprivate java.io.File _uploadDirectory;\n\n\tpublic FileUtility(java.lang.String directoryName) {\n\t\n        UPLOAD_DIRECTORY_NAME = directoryName;\n    }\n\n\tpublic java.io.File createUploadDirectory(javax.servlet.http.HttpServletRequest request) {\n\t\n        _uploadDirectoryPath = request.getServletContext().getRealPath(UPLOAD_DIRECTORY_NAME) + \u0022/\u0022;\n        _uploadDirectory = new File(_uploadDirectoryPath);\n\n        if (!_uploadDirectory.exists()) {\n            //noinspection ResultOfMethodCallIgnored\n            _uploadDirectory.mkdirs();\n        } else {\n            System.out.println(\u0022DIR\\t\u0022 + _uploadDirectory.getAbsolutePath());\n        }\n        return _uploadDirectory;\n    }\n\n\tpublic java.io.File createUploadFile(java.io.File directory, java.lang.String name) {\n\t\n        return new File(directory.getPath() + \u0022/\u0022 + name);\n    }\n\n\t@java.lang.Override\n\tpublic java.lang.String uploadFile(java.io.File directory, org.springframework.web.multipart.MultipartFile file) {\n\t\n        try {\n            File transferFile = createUploadFile(directory, file.getOriginalFilename());\n            file.transferTo(transferFile);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \u0022Failure\u0022;\n        }\n        return \u0022Success\u0022;\n    }\n\n\t@java.lang.Override\n\tpublic java.lang.String uploadAllFiles(java.io.File directory, org.springframework.web.multipart.MultipartFile[] files) {\n\t\n        StringBuilder message = new StringBuilder();\n        for (MultipartFile file : files) {\n            if (file.getOriginalFilename().isEmpty())\n                continue;\n            try {\n                File transferFile = createUploadFile(directory, file.getOriginalFilename());\n                file.transferTo(transferFile);\n\n//                System.out.println(\u0022Transfer File Location =\u003e \u0022 + transferFile.getAbsolutePath());\n\n                message.append(\u0022You successfully uploaded file \u0022);\n                message.append(file.getOriginalFilename());\n                message.append(\u0022\u003cbr /\u003e\u0022);\n\n            } catch (Exception e) {\n                return \u0022You failed to upload \u0022 + file.getOriginalFilename() + \u0022 =\u003e \u0022 + e.getMessage();\n            }\n        }\n        return message.toString();\n    }\n\n\t@java.lang.Override\n\tpublic java.io.File getUploadedFileByNameAndType(java.lang.String queryName) {\n\t\n        File files[] = _uploadDirectory.listFiles((dir, name) -\u003e name.equalsIgnoreCase(queryName));\n\n        if (files == null)\n            return null;\n\n        return files[0];\n    }\n\n\t@java.lang.Override\n\tpublic java.util.List\u003cjava.io.File\u003e getUploadedFilesByType(java.lang.String queryType) {\n\t\n        File files[] = _uploadDirectory.listFiles((dir, name) -\u003e name.endsWith(queryType));\n\n        if (files == null)\n            return null;\n\n        return Arrays.asList(files);\n    }\n\n\t@java.lang.Override\n\tpublic java.util.List\u003cjava.io.File\u003e getUploadedFiles() {\n\t\n        File files[] = _uploadDirectory.listFiles();\n\n        if (files == null)\n            return null;\n\n        return Arrays.asList(files);\n    }\n\n\t@java.lang.Override\n\tpublic java.io.File getUploadDirectory() {\n\t\n        return _uploadDirectory;\n    }\n\n\t@java.lang.Override\n\tpublic java.io.File getUploadDirectory(javax.servlet.http.HttpServletRequest request) {\n\t\n        if (_uploadDirectory == null || !_uploadDirectory.exists())\n            createUploadDirectory(request);\n\n        return _uploadDirectory;\n    }\n\n\t@java.lang.Override\n\tpublic java.lang.String getUploadDirectoryPath() {\n\t return _uploadDirectoryPath; }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [],
    "fields": [
      "private static MappingProfile org.wasps.data.SingletonUtility.mappingProfile",
      "private static ParsingProfile org.wasps.data.SingletonUtility.parsingProfile",
      "private static IWorker org.wasps.data.SingletonUtility.worker",
      "private static ParsedRepository org.wasps.data.SingletonUtility.parsedRepository",
      "private static ModelRepository org.wasps.data.SingletonUtility.modelRepository",
      "private static IMappingService org.wasps.data.SingletonUtility.mappingService",
      "private static IParsingService org.wasps.data.SingletonUtility.parser",
      "private static IFileService org.wasps.data.SingletonUtility.fileService",
      "private static ISmellerService org.wasps.data.SingletonUtility.smeller",
      "private static IFileUtility org.wasps.data.SingletonUtility.fileUtility",
      "private static JSONSerializer org.wasps.data.SingletonUtility.jsonSerializer",
      "private static IJsonUtility org.wasps.data.SingletonUtility.jsonUtility",
      "private static final String org.wasps.data.SingletonUtility.UPLOAD_DIRECTORY"
    ],
    "imports": [
      "flexjson.JSONSerializer",
      "org.wasps.configuration.MappingProfile",
      "org.wasps.configuration.ParsingProfile",
      "org.wasps.data.repository.abstracts.IFileUtility",
      "org.wasps.data.repository.abstracts.IJsonUtility",
      "org.wasps.data.repository.concretes.FileUtility",
      "org.wasps.data.repository.concretes.JsonUtility",
      "org.wasps.data.repository.concretes.ModelRepository",
      "org.wasps.data.repository.concretes.ParsedRepository",
      "org.wasps.service.abstracts.IFileService",
      "org.wasps.service.abstracts.IMappingService",
      "org.wasps.service.abstracts.IParsingService",
      "org.wasps.service.abstracts.IWorker",
      "org.wasps.service.concretes.FileService",
      "org.wasps.service.concretes.MappingService",
      "org.wasps.service.concretes.ParsingService",
      "org.wasps.service.concretes.Worker",
      "org.wasps.service.smells.abstracts.ISmellerService",
      "org.wasps.service.smells.concretes.SmellerService"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getParsedRepository()",
        "parameters": [],
        "returnType": "ParsedRepository",
        "sourceCode": [
          "if (parsedRepository == null) {",
          "            parsedRepository = new ParsedRepository();",
          "        }",
          "        return parsedRepository;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getModelRepository()",
        "parameters": [],
        "returnType": "ModelRepository",
        "sourceCode": [
          "if (modelRepository == null) {",
          "            modelRepository = new ModelRepository();",
          "        }",
          "        return modelRepository;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getMappingProfile()",
        "parameters": [],
        "returnType": "MappingProfile",
        "sourceCode": [
          "if (mappingProfile == null) {",
          "            mappingProfile = new MappingProfile();",
          "        }",
          "        return mappingProfile;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getParsingProfile()",
        "parameters": [],
        "returnType": "ParsingProfile",
        "sourceCode": [
          "if (parsingProfile == null) {",
          "            parsingProfile = new ParsingProfile();",
          "        }",
          "        return parsingProfile;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getMappingService()",
        "parameters": [],
        "returnType": "IMappingService",
        "sourceCode": [
          "if (mappingService == null) {",
          "            mappingService = new MappingService();",
          "        }",
          "        return mappingService;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getSmeller()",
        "parameters": [],
        "returnType": "ISmellerService",
        "sourceCode": [
          "if (smeller == null) {",
          "            smeller = new SmellerService();",
          "        }",
          "        return smeller;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getParser()",
        "parameters": [],
        "returnType": "IParsingService",
        "sourceCode": [
          "if (parser == null) {",
          "            parser = new ParsingService();",
          "        }",
          "        return parser;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getFileUtility()",
        "parameters": [],
        "returnType": "IFileUtility",
        "sourceCode": [
          "if (fileUtility == null) {",
          "            fileUtility = new FileUtility(UPLOAD_DIRECTORY);",
          "        }",
          "        return fileUtility;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getJsonSerializer()",
        "parameters": [],
        "returnType": "JSONSerializer",
        "sourceCode": [
          "if (jsonSerializer == null) {",
          "            jsonSerializer = new JSONSerializer();",
          "        }",
          "        return jsonSerializer;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getJson()",
        "parameters": [],
        "returnType": "IJsonUtility",
        "sourceCode": [
          "if (jsonUtility == null) {",
          "            jsonUtility = new JsonUtility();",
          "        }",
          "        return jsonUtility;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getFileService()",
        "parameters": [],
        "returnType": "IFileService",
        "sourceCode": [
          "if (fileService == null) {",
          "            fileService = new FileService();",
          "        }",
          "        return fileService;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 4,
        "name": "getWorker()",
        "parameters": [],
        "returnType": "IWorker",
        "sourceCode": [
          "if (worker == null) {",
          "            worker = new Worker();",
          "        }",
          "        return worker;"
        ]
      }
    ],
    "name": "SingletonUtility",
    "packageName": "org.wasps.data",
    "smellReports": {},
    "sourceCode": "package org.wasps.data;\n\nimport flexjson.JSONSerializer;\nimport org.wasps.configuration.MappingProfile;\nimport org.wasps.configuration.ParsingProfile;\nimport org.wasps.data.repository.abstracts.IFileUtility;\nimport org.wasps.data.repository.abstracts.IJsonUtility;\nimport org.wasps.data.repository.concretes.FileUtility;\nimport org.wasps.data.repository.concretes.JsonUtility;\nimport org.wasps.data.repository.concretes.ModelRepository;\nimport org.wasps.data.repository.concretes.ParsedRepository;\nimport org.wasps.service.abstracts.IFileService;\nimport org.wasps.service.abstracts.IMappingService;\nimport org.wasps.service.abstracts.IParsingService;\nimport org.wasps.service.abstracts.IWorker;\nimport org.wasps.service.concretes.FileService;\nimport org.wasps.service.concretes.MappingService;\nimport org.wasps.service.concretes.ParsingService;\nimport org.wasps.service.concretes.Worker;\nimport org.wasps.service.smells.abstracts.ISmellerService;\nimport org.wasps.service.smells.concretes.SmellerService;\n\npublic abstract class SingletonUtility {\n\n\tprivate static org.wasps.configuration.MappingProfile mappingProfile = null;\n\n\tprivate static org.wasps.configuration.ParsingProfile parsingProfile = null;\n\n\tprivate static org.wasps.service.abstracts.IWorker worker = null;\n\n\tprivate static org.wasps.data.repository.concretes.ParsedRepository parsedRepository = null;\n\n\tprivate static org.wasps.data.repository.concretes.ModelRepository modelRepository = null;\n\n\tprivate static org.wasps.service.abstracts.IMappingService mappingService = null;\n\n\tprivate static org.wasps.service.abstracts.IParsingService parser = null;\n\n\tprivate static org.wasps.service.abstracts.IFileService fileService = null;\n\n\tprivate static org.wasps.service.smells.abstracts.ISmellerService smeller = null;\n\n\tprivate static org.wasps.data.repository.abstracts.IFileUtility fileUtility = null;\n\n\tprivate static flexjson.JSONSerializer jsonSerializer = null;\n\n\tprivate static org.wasps.data.repository.abstracts.IJsonUtility jsonUtility = null;\n\n\tprivate static final java.lang.String UPLOAD_DIRECTORY = \u0022/uploads\u0022;\n\n\tpublic static synchronized org.wasps.data.repository.concretes.ParsedRepository getParsedRepository() {\n\t\n        if (parsedRepository == null) {\n            parsedRepository = new ParsedRepository();\n        }\n        return parsedRepository;\n    }\n\n\tpublic static synchronized org.wasps.data.repository.concretes.ModelRepository getModelRepository() {\n\t\n        if (modelRepository == null) {\n            modelRepository = new ModelRepository();\n        }\n        return modelRepository;\n    }\n\n\tpublic static synchronized org.wasps.configuration.MappingProfile getMappingProfile() {\n\t\n        if (mappingProfile == null) {\n            mappingProfile = new MappingProfile();\n        }\n        return mappingProfile;\n    }\n\n\tpublic static synchronized org.wasps.configuration.ParsingProfile getParsingProfile() {\n\t\n        if (parsingProfile == null) {\n            parsingProfile = new ParsingProfile();\n        }\n        return parsingProfile;\n    }\n\n\tpublic static synchronized org.wasps.service.abstracts.IMappingService getMappingService() {\n\t\n        if (mappingService == null) {\n            mappingService = new MappingService();\n        }\n        return mappingService;\n    }\n\n\tpublic static synchronized org.wasps.service.smells.abstracts.ISmellerService getSmeller() {\n\t\n        if (smeller == null) {\n            smeller = new SmellerService();\n        }\n        return smeller;\n    }\n\n\tpublic static synchronized org.wasps.service.abstracts.IParsingService getParser() {\n\t\n        if (parser == null) {\n            parser = new ParsingService();\n        }\n        return parser;\n    }\n\n\tpublic static synchronized org.wasps.data.repository.abstracts.IFileUtility getFileUtility() {\n\t\n        if (fileUtility == null) {\n            fileUtility = new FileUtility(UPLOAD_DIRECTORY);\n        }\n        return fileUtility;\n    }\n\n\tpublic static synchronized flexjson.JSONSerializer getJsonSerializer() {\n\t\n        if (jsonSerializer == null) {\n            jsonSerializer = new JSONSerializer();\n        }\n        return jsonSerializer;\n    }\n\n\tpublic static synchronized org.wasps.data.repository.abstracts.IJsonUtility getJson() {\n\t\n        if (jsonUtility == null) {\n            jsonUtility = new JsonUtility();\n        }\n        return jsonUtility;\n    }\n\n\tpublic static synchronized org.wasps.service.abstracts.IFileService getFileService() {\n\t\n        if (fileService == null) {\n            fileService = new FileService();\n        }\n        return fileService;\n    }\n\n\tpublic static synchronized org.wasps.service.abstracts.IWorker getWorker() {\n\t\n        if (worker == null) {\n            worker = new Worker();\n        }\n        return worker;\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public org.wasps.data.repository.concretes.ModelRepository()"
    ],
    "fields": [],
    "imports": [
      "org.wasps.model.ClassModel"
    ],
    "interface": false,
    "methods": [],
    "name": "ModelRepository",
    "packageName": "org.wasps.data.repository.concretes",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.concretes;\n\nimport org.wasps.model.ClassModel;\n\npublic class ModelRepository extends org.wasps.data.repository.concretes.Repository\u003corg.wasps.model.ClassModel\u003e {\n\n\tpublic ModelRepository() {\n\t\n        super();\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public org.wasps.data.repository.concretes.Repository()"
    ],
    "fields": [
      "private Map org.wasps.data.repository.concretes.Repository.map"
    ],
    "imports": [
      "org.wasps.data.repository.abstracts.IRepository",
      "java.util.ArrayList",
      "java.util.HashMap",
      "java.util.List",
      "java.util.Map"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 2,
        "name": "insert(file)",
        "parameters": [
          "T file"
        ],
        "returnType": "void",
        "sourceCode": [
          "map.computeIfAbsent(file.toString(), k -\u003e new ArrayList\u003c\u003e());",
          "        map.get(file.toString()).add(file);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "insert(files)",
        "parameters": [
          "List files"
        ],
        "returnType": "void",
        "sourceCode": [
          "files.forEach(this::insert);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "delete(file)",
        "parameters": [
          "T file"
        ],
        "returnType": "void",
        "sourceCode": [
          "map.get(file.toString()).remove(file);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 3,
        "name": "get()",
        "parameters": [],
        "returnType": "List",
        "sourceCode": [
          "List\u003cT\u003e files = new ArrayList\u003c\u003e();",
          "        map.values().forEach(files::addAll);",
          "        return files;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "get(name)",
        "parameters": [
          "String name"
        ],
        "returnType": "List",
        "sourceCode": [
          "return map.get(name);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "isEmpty()",
        "parameters": [],
        "returnType": "boolean",
        "sourceCode": [
          "return map.isEmpty();"
        ]
      }
    ],
    "name": "Repository",
    "packageName": "org.wasps.data.repository.concretes",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.concretes;\n\nimport org.wasps.data.repository.abstracts.IRepository;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic abstract class Repository implements org.wasps.data.repository.abstracts.IRepository\u003cT\u003e {\n\n\tprivate java.util.Map\u003cjava.lang.String,java.util.ArrayList\u003cT\u003e\u003e map;\n\n\tpublic Repository() {\n\t\n        map = new HashMap\u003c\u003e();\n    }\n\n\tpublic void insert(T file) {\n\t\n        map.computeIfAbsent(file.toString(), k -\u003e new ArrayList\u003c\u003e());\n        map.get(file.toString()).add(file);\n    }\n\n\tpublic void insert(java.util.List\u003cT\u003e files) {\n\t\n        files.forEach(this::insert);\n    }\n\n\tpublic void delete(T file) {\n\t\n        map.get(file.toString()).remove(file);\n    }\n\n\tpublic java.util.List\u003cT\u003e get() {\n\t\n        List\u003cT\u003e files = new ArrayList\u003c\u003e();\n        map.values().forEach(files::addAll);\n        return files;\n    }\n\n\tpublic java.util.List\u003cT\u003e get(java.lang.String name) {\n\t\n        return map.get(name);\n    }\n\n\tpublic boolean isEmpty() {\n\t return map.isEmpty(); }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public org.wasps.data.testfiles.TestClassGood(List)"
    ],
    "fields": [
      "private int org.wasps.data.testfiles.TestClassGood.testInt",
      "private String org.wasps.data.testfiles.TestClassGood.testString",
      "private final String org.wasps.data.testfiles.TestClassGood.testConstString",
      "private List org.wasps.data.testfiles.TestClassGood.dependency"
    ],
    "imports": [
      "java.util.List"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getTestInt()",
        "parameters": [],
        "returnType": "int",
        "sourceCode": [
          "return testInt;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "setTestInt(testInt)",
        "parameters": [
          "int testInt"
        ],
        "returnType": "void",
        "sourceCode": [
          "this.testInt = testInt;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getTestString()",
        "parameters": [],
        "returnType": "String",
        "sourceCode": [
          "return testString;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "setTestString(testString)",
        "parameters": [
          "String testString"
        ],
        "returnType": "void",
        "sourceCode": [
          "this.testString = testString;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getTestConstString()",
        "parameters": [],
        "returnType": "String",
        "sourceCode": [
          "return testConstString;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "setSomethingFromString()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "String tester = testConstString;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "addToDependencyList(object)",
        "parameters": [
          "Object object"
        ],
        "returnType": "void",
        "sourceCode": [
          "dependency.add(object);"
        ]
      }
    ],
    "name": "TestClassGood",
    "packageName": "org.wasps.data.testfiles",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.testfiles;\n\nimport java.util.List;\n\npublic class TestClassGood {\n\n\tprivate int testInt;\n\n\tprivate java.lang.String testString;\n\n\tprivate final java.lang.String testConstString;\n\n\tprivate java.util.List\u003cjava.lang.Object\u003e dependency;\n\n\tpublic TestClassGood(java.util.List\u003cjava.lang.Object\u003e dependencyInjection) {\n\t\n        this.testConstString = \u0022Magic strings are bad\u0022;\n        this.dependency = dependencyInjection;\n    }\n\n\tpublic int getTestInt() {\n\t\n        return testInt;\n    }\n\n\tpublic void setTestInt(int testInt) {\n\t\n        this.testInt = testInt;\n    }\n\n\tpublic java.lang.String getTestString() {\n\t\n        return testString;\n    }\n\n\tpublic void setTestString(java.lang.String testString) {\n\t\n        this.testString = testString;\n    }\n\n\tpublic java.lang.String getTestConstString() {\n\t\n        return testConstString;\n    }\n\n\tpublic void setSomethingFromString() {\n\t\n        String tester = testConstString;\n    }\n\n\tpublic void addToDependencyList(java.lang.Object object) {\n\t dependency.add(object); }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [],
    "fields": [],
    "imports": [
      "org.wasps.model.ClassModel",
      "java.util.List"
    ],
    "interface": true,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "getFiles()",
        "parameters": [],
        "returnType": "List",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "writeFiles(files)",
        "parameters": [
          "List files"
        ],
        "returnType": "void",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "getFilesFromJson()",
        "parameters": [],
        "returnType": "List",
        "sourceCode": []
      }
    ],
    "name": "IJsonUtility",
    "packageName": "org.wasps.data.repository.abstracts",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.abstracts;\n\nimport org.wasps.model.ClassModel;\nimport java.util.List;\n\npublic interface IJsonUtility {\n\n\tjava.util.List\u003corg.wasps.model.ClassModel\u003e getFiles();\n\n\tvoid writeFiles(java.util.List\u003corg.wasps.model.ClassModel\u003e files);\n\n\tjava.util.List\u003corg.wasps.model.ClassModel\u003e getFilesFromJson();\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public org.wasps.data.repository.concretes.DataStore()"
    ],
    "fields": [
      "private ModelRepository org.wasps.data.repository.concretes.DataStore._model",
      "private ParsedRepository org.wasps.data.repository.concretes.DataStore._parsed"
    ],
    "imports": [
      "org.wasps.data.SingletonUtility",
      "org.wasps.data.repository.abstracts.IDataStore"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "model()",
        "parameters": [],
        "returnType": "ModelRepository",
        "sourceCode": [
          "return _model;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "parsed()",
        "parameters": [],
        "returnType": "ParsedRepository",
        "sourceCode": [
          "return _parsed;"
        ]
      }
    ],
    "name": "DataStore",
    "packageName": "org.wasps.data.repository.concretes",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.concretes;\n\nimport org.wasps.data.SingletonUtility;\nimport org.wasps.data.repository.abstracts.IDataStore;\n\npublic class DataStore implements org.wasps.data.repository.abstracts.IDataStore {\n\n\tprivate org.wasps.data.repository.concretes.ModelRepository _model;\n\n\tprivate org.wasps.data.repository.concretes.ParsedRepository _parsed;\n\n\tpublic DataStore() {\n\t\n        _model = SingletonUtility.getModelRepository();\n        _parsed = SingletonUtility.getParsedRepository();\n    }\n\n\t@java.lang.Override\n\tpublic org.wasps.data.repository.concretes.ModelRepository model() {\n\t\n        return _model;\n    }\n\n\tpublic org.wasps.data.repository.concretes.ParsedRepository parsed() {\n\t\n        return _parsed;\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [],
    "fields": [
      "public String org.wasps.data.testfiles.TestClassBad.testString",
      "public int org.wasps.data.testfiles.TestClassBad.testInt"
    ],
    "imports": [
      "java.util.ArrayList",
      "java.util.List"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 9,
        "name": "badMethod()",
        "parameters": [],
        "returnType": "String",
        "sourceCode": [
          "int five = 2 + 3;",
          "        for(int i=0; i\u003c10; i++)",
          "            five += i;",
          "        List\u003cInteger\u003e list = new ArrayList\u003c\u003e();",
          "        for (int i=0; i\u003c10; i++)",
          "            list.add(i*2);",
          "        for(int item : list)",
          "            System.out.println(item);",
          "        return \u0022This method is bad\u0022;"
        ]
      }
    ],
    "name": "TestClassBad",
    "packageName": "org.wasps.data.testfiles",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.testfiles;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TestClassBad {\n\n\tpublic java.lang.String testString = \u0022test bad\u0022;\n\n\tpublic int testInt = 14;\n\n\tpublic java.lang.String badMethod() {\n\t\n        int five = 2 + 3;\n        for(int i=0; i\u003c10; i++)\n            five += i;\n\n        List\u003cInteger\u003e list = new ArrayList\u003c\u003e();\n        for (int i=0; i\u003c10; i++)\n            list.add(i*2);\n\n        for(int item : list)\n            System.out.println(item);\n\n        return \u0022This method is bad\u0022;\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [],
    "fields": [],
    "imports": [
      "java.util.List"
    ],
    "interface": true,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "get(id)",
        "parameters": [
          "String id"
        ],
        "returnType": "List",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "get()",
        "parameters": [],
        "returnType": "List",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "insert(t)",
        "parameters": [
          "T t"
        ],
        "returnType": "void",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "insert(t)",
        "parameters": [
          "List t"
        ],
        "returnType": "void",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "delete(t)",
        "parameters": [
          "T t"
        ],
        "returnType": "void",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "isEmpty()",
        "parameters": [],
        "returnType": "boolean",
        "sourceCode": []
      }
    ],
    "name": "IRepository",
    "packageName": "org.wasps.data.repository.abstracts",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.abstracts;\n\nimport java.util.List;\n\npublic interface IRepository {\n\n\tjava.util.List\u003cT\u003e get(java.lang.String id);\n\n\tjava.util.List\u003cT\u003e get();\n\n\tvoid insert(T t);\n\n\tvoid insert(java.util.List\u003cT\u003e t);\n\n\tvoid delete(T t);\n\n\tboolean isEmpty();\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public cluedo_game.QuestionLog()"
    ],
    "fields": [],
    "imports": [
      "java.awt.GridLayout",
      "java.util.ArrayList",
      "javax.swing.JFrame",
      "javax.swing.JLabel",
      "javax.swing.JPanel"
    ],
    "interface": false,
    "methods": [],
    "name": "QuestionLog",
    "packageName": "cluedo_game",
    "smellReports": {},
    "sourceCode": "package cluedo_game;\n\nimport java.awt.GridLayout;\nimport java.util.ArrayList;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\npublic class QuestionLog {\n\n\tpublic QuestionLog() {\n\t\n\t\t\n\t\tif (GameLogic.returnGuessArray() == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tJPanel panel = new JPanel();\n\t\tArrayList\u003cString\u003e tempArray = GameLogic.returnGuessArray();\n\t\tint arraySize = tempArray.size();\n\t\t\n\t\tpanel.setLayout(new GridLayout(arraySize, 1));\n\t\t\n\t\tfor (int i = 0; i \u003c arraySize; i++) {\n\t\t\tJLabel tempLabel = new JLabel(tempArray.get(i));\n\t\t\tpanel.add(tempLabel);\n\t\t}\n\t\t\n\t\tJFrame tempFrame = new JFrame();\n\t\t\n\t\ttempFrame.setTitle(\u0022---Log of all the questions currently asked ---\u0022);\n\t\ttempFrame.setSize(400, 400);\n\t\ttempFrame.add(panel);\n\t\ttempFrame.setVisible(true);\t\n\t}\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public org.wasps.data.exceptions.SmellNotFoundException(String)"
    ],
    "fields": [
      "String org.wasps.data.exceptions.SmellNotFoundException.smellName"
    ],
    "imports": [],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "toString()",
        "parameters": [],
        "returnType": "String",
        "sourceCode": [
          "return \u0022The queried smell \\\u0022\u0022 + smellName + \u0022\\\u0022 was not found.\u0022;"
        ]
      }
    ],
    "name": "SmellNotFoundException",
    "packageName": "org.wasps.data.exceptions",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.exceptions;\n\npublic class SmellNotFoundException extends java.lang.Exception {\n\n\tjava.lang.String smellName;\n\n\tpublic SmellNotFoundException(java.lang.String smellName) {\n\t\n        this.smellName = smellName;\n    }\n\n\tpublic java.lang.String toString() {\n\t\n        return \u0022The queried smell \\\u0022\u0022 + smellName + \u0022\\\u0022 was not found.\u0022;\n    }\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [
      "public cluedo_game.AccuseMenu(JFrame,JPanel,Token)"
    ],
    "fields": [
      "private final JFrame cluedo_game.AccuseMenu.boardDisplay",
      "private final JPanel cluedo_game.AccuseMenu.board",
      "private JFrame cluedo_game.AccuseMenu.display",
      "private JLabel cluedo_game.AccuseMenu.displayBackground",
      "private ImageIcon cluedo_game.AccuseMenu.characterAccusedImage",
      "private ImageIcon cluedo_game.AccuseMenu.weaponAccusedImage",
      "private ImageIcon cluedo_game.AccuseMenu.roomAccusedImage",
      "private JLabel cluedo_game.AccuseMenu.characterAccusedLabel",
      "private JLabel cluedo_game.AccuseMenu.weaponAccusedLabel",
      "private JLabel cluedo_game.AccuseMenu.roomAccusedLabel",
      "private JLabel cluedo_game.AccuseMenu.murderCharacterImage",
      "private JLabel cluedo_game.AccuseMenu.murderWeaponImage",
      "private JLabel cluedo_game.AccuseMenu.murderRoomImage",
      "private final Token cluedo_game.AccuseMenu.accusingPlayer",
      "private JButton cluedo_game.AccuseMenu.accuse",
      "private JButton cluedo_game.AccuseMenu.okay",
      "private JPanel cluedo_game.AccuseMenu.gui",
      "private JPanel cluedo_game.AccuseMenu.leftPanel",
      "private JPanel cluedo_game.AccuseMenu.rightPanel",
      "private JPanel cluedo_game.AccuseMenu.titlePanel",
      "private JPanel cluedo_game.AccuseMenu.charsPanel",
      "private JPanel cluedo_game.AccuseMenu.wpnsPanel",
      "private JPanel cluedo_game.AccuseMenu.rmsPanel",
      "private JPanel cluedo_game.AccuseMenu.accuseButtonPanel",
      "private JPanel cluedo_game.AccuseMenu.notePanel",
      "private JButton[] cluedo_game.AccuseMenu.characters",
      "private JButton[] cluedo_game.AccuseMenu.weapons",
      "private JButton[] cluedo_game.AccuseMenu.rooms",
      "private ImageIcon[] cluedo_game.AccuseMenu.charPics",
      "private ImageIcon[] cluedo_game.AccuseMenu.wpnPics",
      "private ImageIcon[] cluedo_game.AccuseMenu.rmPics",
      "private String[] cluedo_game.AccuseMenu.accusedStrings",
      "private boolean[] cluedo_game.AccuseMenu.guessed",
      "private boolean cluedo_game.AccuseMenu.winner",
      "int cluedo_game.AccuseMenu.accuseButtonPressResult",
      "JFrame cluedo_game.AccuseMenu.murderEnvelopeFrame",
      "JPanel cluedo_game.AccuseMenu.murderEnvelopePanel",
      "JPanel cluedo_game.AccuseMenu.murderEnvelopeImages",
      "JPanel cluedo_game.AccuseMenu.murderEnvelopeViewButton",
      "JPanel cluedo_game.AccuseMenu.murderEnvelopeResult"
    ],
    "imports": [
      "javax.imageio.ImageIO",
      "javax.swing.*",
      "java.awt.*",
      "java.awt.event.ActionEvent",
      "java.awt.event.ActionListener",
      "java.awt.image.BufferedImage",
      "java.io.File",
      "java.net.URL",
      "java.util.concurrent.TimeUnit"
    ],
    "interface": false,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 2,
        "name": "switchToAccuseMenu()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "boardDisplay.setVisible(false);",
          "        display.setVisible(true);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getGuessed()",
        "parameters": [],
        "returnType": "boolean",
        "sourceCode": [
          "return guessed[0] \u0026\u0026 guessed[1] \u0026\u0026 guessed[2];"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 44,
        "name": "loadAllCardImages()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "String[] chars =",
          "                {\u0022Green\u0022, \u0022Mustard\u0022, \u0022Peacock\u0022, \u0022Plum\u0022, \u0022Scarlet\u0022, \u0022White\u0022};",
          "        String[] wpns =",
          "                {\u0022Candlestick\u0022, \u0022Dagger\u0022, \u0022Pipe\u0022, \u0022Pistol\u0022, \u0022Rope\u0022, \u0022Wrench\u0022};",
          "        String[] rms =",
          "                {\u0022ballroom\u0022, \u0022billiardroom\u0022, \u0022conservatory\u0022, \u0022diningroom\u0022,",
          "                        \u0022hall\u0022, \u0022kitchen\u0022, \u0022library\u0022, \u0022lounge\u0022, \u0022study\u0022};",
          "        BufferedImage charTemp;",
          "        BufferedImage wpnTemp;",
          "        BufferedImage rmTemp;",
          "        for (int i=0; i\u003c9; i++) {",
          "            rmPics[i] = CardImages.getRoomsByIndex(i);",
          "            rooms[i] = new JButton(rmPics[i]);",
          "            rooms[i].setBorderPainted(false);",
          "            rooms[i].addActionListener(new ButtonAL(i, rooms, rmPics, rms[i], 2, rmPics[i]));",
          "            rmsPanel.add(rooms[i]);",
          "            // Get B\u0026W image",
          "            rmPics[i + 9] = CardImages.getRoomsByIndex((i+9));",
          "            if (i\u003c6) {",
          "                // Characters",
          "                charPics[i] = CardImages.getCharacterByIndex(i);",
          "                characters[i] = new JButton(charPics[i]);",
          "                characters[i].setBorderPainted(false);",
          "                characters[i].addActionListener(new ButtonAL(i, characters, charPics,",
          "                        chars[i].toLowerCase(), 0, charPics[i]));",
          "                charsPanel.add(characters[i]);",
          "                // Get B\u0026W image",
          "                charPics[i + 6] = CardImages.getCharacterByIndex((i + 6));",
          "                // Weapons",
          "                wpnPics[i] = CardImages.getWeaponsByIndex(i);",
          "                weapons[i] = new JButton(wpnPics[i]);",
          "                weapons[i].setBorderPainted(false);",
          "                weapons[i].addActionListener(new ButtonAL(i, weapons, wpnPics, wpns[i].toLowerCase(), 1, wpnPics[i]));",
          "                wpnsPanel.add(weapons[i]);",
          "                // Get B\u0026W image",
          "                wpnPics[i + 6] = CardImages.getWeaponsByIndex((i + 6));",
          "            }",
          "        }",
          "        rmsPanel.setOpaque(false);",
          "        rmsPanel.setSize(1000, 850);",
          "        charsPanel.setOpaque(false);",
          "        charsPanel.setSize(1000, 850);",
          "        wpnsPanel.setOpaque(false);",
          "        wpnsPanel.setSize(1000, 850);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 17,
        "name": "createTitleImage()",
        "parameters": [],
        "returnType": "JPanel",
        "sourceCode": [
          "JPanel panel = new JPanel();",
          "        panel.setPreferredSize(new Dimension(1000, 145));",
          "        JLabel title;",
          "        URL titleImageURL = this.getClass().getResource(\u0022accuse.png\u0022);",
          "        BufferedImage titleImage = null;",
          "        try {",
          "            titleImage = ImageIO.read(titleImageURL);",
          "        } catch (Exception e) {",
          "            e.printStackTrace();",
          "            // #NuclearOption",
          "            System.exit(1);",
          "        }",
          "        title = new JLabel(new ImageIcon(titleImage));",
          "        panel.add(title);",
          "        title.setAlignmentX(Component.LEFT_ALIGNMENT);",
          "        panel.setBackground(Color.BLACK);",
          "        return panel;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 19,
        "name": "createAccuseButtonPanel()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "URL accuseButtonURL =",
          "                this.getClass().getResource(\u0022accusebutton.png\u0022);",
          "        BufferedImage accuseButtonImage = ImageIO.read(accuseButtonURL);",
          "        accuse = new JButton(new ImageIcon(accuseButtonImage));",
          "        accuse.setAlignmentX(Component.LEFT_ALIGNMENT);",
          "        accuse.addActionListener(new AccuseListener());",
          "        accuse.setOpaque(false);",
          "        accuse.setBorderPainted(false);",
          "        // Starts invisible, becomes visible when player has guess all three",
          "        accuse.setVisible(false);",
          "        accuseButtonPanel.setLayout(new GridLayout(3, 1));",
          "        JPanel spacer = new JPanel();",
          "        spacer.setOpaque(false);",
          "        accuseButtonPanel.add(spacer);",
          "        JPanel btnPanel = new JPanel();",
          "        btnPanel.setOpaque(false);",
          "        btnPanel.add(accuse);",
          "        accuseButtonPanel.add(btnPanel);",
          "        accuseButtonPanel.setOpaque(false);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 19,
        "name": "createNotesPanel()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "notePanel.setLayout(new BorderLayout());",
          "        notePanel.setPreferredSize(new Dimension(125, 100));",
          "        notePanel.setOpaque(false);",
          "        JTextArea notes = new JTextArea(\u0022\u0022, 10, 8);",
          "        notes.setBackground(Color.BLACK);",
          "        notes.setForeground(Color.WHITE);",
          "        notes.setAlignmentX(Component.LEFT_ALIGNMENT);",
          "        notes.setEnabled(false);",
          "        notes.setBorder(BorderFactory.createEtchedBorder(Color.GRAY, Color.BLACK));",
          "        notes.append(\u0022    \u0022 + accusingPlayer.getName() + \u0022\u0027s notes\u0022);",
          "        notes.append(\u0022\\n-------------------------\\n\u0022);",
          "        for (String s : accusingPlayer.getNotes())",
          "            notes.append(s + \u0022\\n\u0022);",
          "        notePanel.add(notes, BorderLayout.WEST);",
          "        JPanel spacer = new JPanel();",
          "        spacer.setSize(75, 115);",
          "        spacer.setOpaque(false);",
          "        notePanel.add(spacer, BorderLayout.EAST);",
          "        notePanel.validate();"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 6,
        "name": "loadBackgroundImage()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "BufferedImage bgImage;",
          "        // Load background image",
          "        URL bgImageUrl = this.getClass().getResource(\u0022accusebg.jpg\u0022);",
          "        bgImage = ImageIO.read(bgImageUrl);",
          "        displayBackground = new JLabel(new ImageIcon(bgImage));",
          "        display.setContentPane(displayBackground);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 7,
        "name": "displayAccusationResult(result)",
        "parameters": [
          "boolean result"
        ],
        "returnType": "void",
        "sourceCode": [
          "if (result)",
          "            JOptionPane.showMessageDialog(null, \u0022Win\u0022);",
          "        else {",
          "            JOptionPane.showMessageDialog(null, \u0022Lose\u0022);",
          "//            display.dispose();",
          "//            boardDisplay.setVisible(true);",
          "        }"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 21,
        "name": "viewMurderEnvelope(winner)",
        "parameters": [
          "boolean winner"
        ],
        "returnType": "void",
        "sourceCode": [
          "this.winner = winner;",
          "        murderEnvelopeFrame = new JFrame(\u0022Murder Envelope\u0022);",
          "        murderEnvelopeFrame.setPreferredSize(new Dimension(1169, 600));",
          "        murderEnvelopeFrame.setBackground(Color.BLACK);",
          "        buildMurderEnvelopeImagesPanel();",
          "        buildMurderEnvelopeButtonPanel();",
          "        buildMurderEnvelopResultPanel();",
          "        murderEnvelopePanel = new JPanel();",
          "        murderEnvelopePanel.setSize(1169, 600);",
          "        murderEnvelopePanel.setLayout(new GridLayout(3, 1));",
          "        murderEnvelopePanel.setBackground(Color.BLACK);",
          "        murderEnvelopePanel.add(murderEnvelopeImages);",
          "        murderEnvelopePanel.add(murderEnvelopeViewButton);",
          "        murderEnvelopePanel.add(murderEnvelopeResult);",
          "        murderEnvelopeFrame.add(murderEnvelopePanel);",
          "        murderEnvelopeFrame.pack();",
          "        murderEnvelopeFrame.validate();",
          "        display.setVisible(false);",
          "        murderEnvelopeFrame.setResizable(false);",
          "        murderEnvelopeFrame.setLocationRelativeTo(null);",
          "        murderEnvelopeFrame.setVisible(true);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 20,
        "name": "buildMurderEnvelopeImagesPanel()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "murderCharacterImage = new JLabel(new ImageIcon(",
          "                GameLogic.getDeck().getMurderEnvelope().get(0).getImage()));",
          "        murderWeaponImage = new JLabel(new ImageIcon(",
          "                GameLogic.getDeck().getMurderEnvelope().get(1).getImage()));",
          "        murderRoomImage = new JLabel(new ImageIcon(",
          "                GameLogic.getDeck().getMurderEnvelope().get(2).getImage()));",
          "        murderEnvelopeImages = new JPanel();",
          "        murderEnvelopeImages.setSize(1169, 100);",
          "        murderEnvelopeImages.setLayout(new GridLayout(1, 3));",
          "        murderEnvelopeImages.add(murderCharacterImage);",
          "        murderCharacterImage.setAlignmentX(Component.CENTER_ALIGNMENT);",
          "        murderCharacterImage.setVisible(false);",
          "        murderEnvelopeImages.add(murderWeaponImage);",
          "        murderWeaponImage.setAlignmentX(Component.CENTER_ALIGNMENT);",
          "        murderWeaponImage.setVisible(false);",
          "        murderEnvelopeImages.add(murderRoomImage);",
          "        murderRoomImage.setAlignmentX(Component.CENTER_ALIGNMENT);",
          "        murderRoomImage.setVisible(false);",
          "        murderEnvelopeImages.setOpaque(false);",
          "        murderEnvelopeImages.setBackground(Color.BLACK);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 8,
        "name": "buildMurderEnvelopeButtonPanel()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "murderEnvelopeViewButton = new JPanel();",
          "        JButton viewButton = new JButton(\u0022Time to check the murder envelope...\u0022);",
          "        viewButton.setAlignmentY(JButton.CENTER);",
          "        viewButton.addActionListener(new displayMurderEnvelopeListener(viewButton));",
          "        viewButton.setAlignmentY(Component.CENTER_ALIGNMENT);",
          "        murderEnvelopeViewButton.add(viewButton);",
          "        murderEnvelopeViewButton.setOpaque(false);",
          "        murderEnvelopeViewButton.setBackground(Color.BLACK);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 22,
        "name": "buildMurderEnvelopResultPanel()",
        "parameters": [],
        "returnType": "void",
        "sourceCode": [
          "String labelString;",
          "        if (winner)",
          "            labelString = \u0022win\u0022;",
          "        else",
          "            labelString = \u0022lose\u0022;",
          "        JLabel labelLabel;",
          "        URL labelURL = this.getClass().getResource(\u0022you\u0022 + labelString + \u0022.jpg\u0022);",
          "        BufferedImage labelImage = null;",
          "        try {",
          "            labelImage = ImageIO.read(labelURL);",
          "        } catch (Exception e) {",
          "            e.printStackTrace();",
          "            // #NuclearOption",
          "            System.exit(1);",
          "        }",
          "        labelLabel = new JLabel(new ImageIcon(labelImage));",
          "        labelLabel.setAlignmentX(JLabel.CENTER);",
          "        murderEnvelopeResult = new JPanel();",
          "        murderEnvelopeResult.add(labelLabel);",
          "        murderEnvelopeResult.setVisible(false);",
          "        murderEnvelopeResult.setOpaque(false);",
          "        murderEnvelopeResult.setBackground(Color.BLACK);"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 1,
        "name": "getThis()",
        "parameters": [],
        "returnType": "AccuseMenu",
        "sourceCode": [
          "return this;"
        ]
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 18,
        "name": "constructResultFrame(name)",
        "parameters": [
          "String name"
        ],
        "returnType": "JFrame",
        "sourceCode": [
          "JFrame frame = new JFrame();",
          "        JPanel win = new JPanel();",
          "        win.setLayout(new GridLayout(2, 1));",
          "        win.add(new JLabel(\u0022\\n\\t\u0022 + name",
          "                + \u0022 has won the game!\\t\\n\u0022));",
          "        JButton winButton = new JButton(\u0022End Game\u0022);",
          "        winButton.addActionListener(new ActionListener() {",
          "            @Override",
          "            public void actionPerformed(ActionEvent e) {",
          "                System.exit(1);",
          "            }",
          "        });",
          "        win.add(winButton);",
          "        win.validate();",
          "        frame.add(win);",
          "        frame.pack();",
          "        frame.setLocationRelativeTo(null);",
          "        return frame;"
        ]
      }
    ],
    "name": "AccuseMenu",
    "packageName": "cluedo_game",
    "smellReports": {},
    "sourceCode": "package cluedo_game;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.net.URL;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Steps:\n *  1. Show all cards possible and player\u0027s notes to the right\n *  2. Let them pick one of each, then confirm\n *  3. Go to interim screen warning other players not to look\n *  4. Go to third screen - show cards guessed and murder envelope\n *  5. Player either wins or is eliminated - put this functionality in GameLogic\n *  6. If player is eliminated and subsequent player count is 1, remaining player wins\n */\npublic class AccuseMenu {\n\n\tprivate final javax.swing.JFrame boardDisplay;\n\n\tprivate final javax.swing.JPanel board;\n\n\tprivate javax.swing.JFrame display;\n\n\tprivate javax.swing.JLabel displayBackground;\n\n\tprivate javax.swing.ImageIcon characterAccusedImage;\n\n\tprivate javax.swing.ImageIcon weaponAccusedImage;\n\n\tprivate javax.swing.ImageIcon roomAccusedImage;\n\n\tprivate javax.swing.JLabel characterAccusedLabel;\n\n\tprivate javax.swing.JLabel weaponAccusedLabel;\n\n\tprivate javax.swing.JLabel roomAccusedLabel;\n\n\tprivate javax.swing.JLabel murderCharacterImage;\n\n\tprivate javax.swing.JLabel murderWeaponImage;\n\n\tprivate javax.swing.JLabel murderRoomImage;\n\n\tprivate final Token accusingPlayer;\n\n\tprivate javax.swing.JButton accuse;\n\n\tprivate javax.swing.JButton okay;\n\n\tprivate javax.swing.JPanel gui = new JPanel();\n\n\tprivate javax.swing.JPanel leftPanel = new JPanel();\n\n\tprivate javax.swing.JPanel rightPanel = new JPanel();\n\n\tprivate javax.swing.JPanel titlePanel = new JPanel();\n\n\tprivate javax.swing.JPanel charsPanel = new JPanel();\n\n\tprivate javax.swing.JPanel wpnsPanel = new JPanel();\n\n\tprivate javax.swing.JPanel rmsPanel = new JPanel();\n\n\tprivate javax.swing.JPanel accuseButtonPanel = new JPanel();\n\n\tprivate javax.swing.JPanel notePanel = new JPanel();\n\n\tprivate javax.swing.JButton[] characters = new JButton[6];\n\n\tprivate javax.swing.JButton[] weapons = new JButton[6];\n\n\tprivate javax.swing.JButton[] rooms = new JButton[9];\n\n\tprivate javax.swing.ImageIcon[] charPics = new ImageIcon[12];\n\n\tprivate javax.swing.ImageIcon[] wpnPics = new ImageIcon[12];\n\n\tprivate javax.swing.ImageIcon[] rmPics = new ImageIcon[18];\n\n\tprivate java.lang.String[] accusedStrings = new String[3];\n\n\tprivate boolean[] guessed = {false, false, false};\n\n\tprivate boolean winner = false;\n\n\tint accuseButtonPressResult = \n\n     ;\n\n\tjavax.swing.JFrame murderEnvelopeFrame;\n\n\tjavax.swing.JPanel murderEnvelopePanel;\n\n\tjavax.swing.JPanel murderEnvelopeImages;\n\n\tjavax.swing.JPanel murderEnvelopeViewButton;\n\n\tjavax.swing.JPanel murderEnvelopeResult;\n\n\tpublic AccuseMenu(javax.swing.JFrame orig, javax.swing.JPanel board, Token player) {\n\t\n        boardDisplay = orig;\n        this.board = board;\n        accusingPlayer = player;\n\n        display = new JFrame(\u0022Cluedo\u0022);\n        display.setPreferredSize(new Dimension(1415, 850));\n\n        try {\n            titlePanel = createTitleImage();\n            loadAllCardImages();\n            createAccuseButtonPanel();\n            loadBackgroundImage();\n        } catch (Exception e) { e.printStackTrace(); }\n\n        gui.setSize(1415, 850);\n        gui.setOpaque(false);\n        gui.setLayout(new GridBagLayout());\n\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.fill = GridBagConstraints.VERTICAL;\n        gbc.gridx = 0;\n        gbc.gridy = 0;\n        gbc.gridwidth = 6;\n\n        leftPanel.setSize(1000, 850);\n        rightPanel.setSize(415, 850);\n        leftPanel.setLayout(new GridLayout(5, 1));\n        leftPanel.add(titlePanel);\n        leftPanel.add(charsPanel);\n        leftPanel.add(wpnsPanel);\n        leftPanel.add(rmsPanel);\n        leftPanel.setOpaque(false);\n\n        rightPanel.setLayout(new GridLayout(2, 1));\n        rightPanel.add(notePanel);\n\n        rightPanel.add(accuseButtonPanel);\n        rightPanel.setOpaque(false);\n\n        createNotesPanel();\n\n        gui.add(leftPanel, gbc);\n        gbc.gridx = 6;\n        gbc.gridwidth = 1;\n        gbc.insets = new Insets(0, 0, 0, 100);\n        gbc.fill = GridBagConstraints.HORIZONTAL;\n        gui.add(rightPanel, gbc);\n        display.add(gui);\n        display.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        display.setResizable(false);\n        display.pack();\n        display.setLocationRelativeTo(null);\n        display.setVisible(true);\n    }\n\n\tpublic void switchToAccuseMenu() {\n\t\n        boardDisplay.setVisible(false);\n        display.setVisible(true);\n    }\n\n\tpublic boolean getGuessed() {\n\t\n        return guessed[0] \u0026\u0026 guessed[1] \u0026\u0026 guessed[2];\n    }\n\n\tpublic void loadAllCardImages() throws java.lang.Exception {\n\t\n        String[] chars =\n                {\u0022Green\u0022, \u0022Mustard\u0022, \u0022Peacock\u0022, \u0022Plum\u0022, \u0022Scarlet\u0022, \u0022White\u0022};\n        String[] wpns =\n                {\u0022Candlestick\u0022, \u0022Dagger\u0022, \u0022Pipe\u0022, \u0022Pistol\u0022, \u0022Rope\u0022, \u0022Wrench\u0022};\n        String[] rms =\n                {\u0022ballroom\u0022, \u0022billiardroom\u0022, \u0022conservatory\u0022, \u0022diningroom\u0022,\n                        \u0022hall\u0022, \u0022kitchen\u0022, \u0022library\u0022, \u0022lounge\u0022, \u0022study\u0022};\n\n        BufferedImage charTemp;\n        BufferedImage wpnTemp;\n        BufferedImage rmTemp;\n\n        for (int i=0; i\u003c9; i++) {\n            rmPics[i] = CardImages.getRoomsByIndex(i);\n            rooms[i] = new JButton(rmPics[i]);\n            rooms[i].setBorderPainted(false);\n            rooms[i].addActionListener(new ButtonAL(i, rooms, rmPics, rms[i], 2, rmPics[i]));\n            rmsPanel.add(rooms[i]);\n\n            // Get B\u0026W image\n            rmPics[i + 9] = CardImages.getRoomsByIndex((i+9));\n\n            if (i\u003c6) {\n                // Characters\n                charPics[i] = CardImages.getCharacterByIndex(i);\n                characters[i] = new JButton(charPics[i]);\n                characters[i].setBorderPainted(false);\n                characters[i].addActionListener(new ButtonAL(i, characters, charPics,\n                        chars[i].toLowerCase(), 0, charPics[i]));\n                charsPanel.add(characters[i]);\n\n                // Get B\u0026W image\n                charPics[i + 6] = CardImages.getCharacterByIndex((i + 6));\n\n                // Weapons\n                wpnPics[i] = CardImages.getWeaponsByIndex(i);\n                weapons[i] = new JButton(wpnPics[i]);\n                weapons[i].setBorderPainted(false);\n                weapons[i].addActionListener(new ButtonAL(i, weapons, wpnPics, wpns[i].toLowerCase(), 1, wpnPics[i]));\n                wpnsPanel.add(weapons[i]);\n\n                // Get B\u0026W image\n                wpnPics[i + 6] = CardImages.getWeaponsByIndex((i + 6));\n            }\n        }\n        rmsPanel.setOpaque(false);\n        rmsPanel.setSize(1000, 850);\n        charsPanel.setOpaque(false);\n        charsPanel.setSize(1000, 850);\n        wpnsPanel.setOpaque(false);\n        wpnsPanel.setSize(1000, 850);\n    }\n\n\tpublic javax.swing.JPanel createTitleImage() {\n\t\n        JPanel panel = new JPanel();\n        panel.setPreferredSize(new Dimension(1000, 145));\n        JLabel title;\n        URL titleImageURL = this.getClass().getResource(\u0022accuse.png\u0022);\n        BufferedImage titleImage = null;\n        try {\n            titleImage = ImageIO.read(titleImageURL);\n        } catch (Exception e) {\n            e.printStackTrace();\n            // #NuclearOption\n            System.exit(1);\n        }\n\n        title = new JLabel(new ImageIcon(titleImage));\n\n        panel.add(title);\n        title.setAlignmentX(Component.LEFT_ALIGNMENT);\n        panel.setBackground(Color.BLACK);\n\n        return panel;\n    }\n\n\tpublic void createAccuseButtonPanel() throws java.lang.Exception {\n\t\n        URL accuseButtonURL =\n                this.getClass().getResource(\u0022accusebutton.png\u0022);\n        BufferedImage accuseButtonImage = ImageIO.read(accuseButtonURL);\n\n        accuse = new JButton(new ImageIcon(accuseButtonImage));\n        accuse.setAlignmentX(Component.LEFT_ALIGNMENT);\n        accuse.addActionListener(new AccuseListener());\n        accuse.setOpaque(false);\n        accuse.setBorderPainted(false);\n\n        // Starts invisible, becomes visible when player has guess all three\n        accuse.setVisible(false);\n\n        accuseButtonPanel.setLayout(new GridLayout(3, 1));\n\n        JPanel spacer = new JPanel();\n        spacer.setOpaque(false);\n        accuseButtonPanel.add(spacer);\n\n        JPanel btnPanel = new JPanel();\n        btnPanel.setOpaque(false);\n        btnPanel.add(accuse);\n        accuseButtonPanel.add(btnPanel);\n        accuseButtonPanel.setOpaque(false);\n    }\n\n\tpublic void createNotesPanel() {\n\t\n        notePanel.setLayout(new BorderLayout());\n        notePanel.setPreferredSize(new Dimension(125, 100));\n        notePanel.setOpaque(false);\n\n        JTextArea notes = new JTextArea(\u0022\u0022, 10, 8);\n        notes.setBackground(Color.BLACK);\n        notes.setForeground(Color.WHITE);\n        notes.setAlignmentX(Component.LEFT_ALIGNMENT);\n        notes.setEnabled(false);\n\n        notes.setBorder(BorderFactory.createEtchedBorder(Color.GRAY, Color.BLACK));\n\n        notes.append(\u0022    \u0022 + accusingPlayer.getName() + \u0022\u0027s notes\u0022);\n        notes.append(\u0022\\n-------------------------\\n\u0022);\n        for (String s : accusingPlayer.getNotes())\n            notes.append(s + \u0022\\n\u0022);\n\n        notePanel.add(notes, BorderLayout.WEST);\n\n        JPanel spacer = new JPanel();\n        spacer.setSize(75, 115);\n        spacer.setOpaque(false);\n        notePanel.add(spacer, BorderLayout.EAST);\n\n        notePanel.validate();\n    }\n\n\tpublic void loadBackgroundImage() throws java.lang.Exception {\n\t\n        BufferedImage bgImage;\n        // Load background image\n        URL bgImageUrl = this.getClass().getResource(\u0022accusebg.jpg\u0022);\n        bgImage = ImageIO.read(bgImageUrl);\n        displayBackground = new JLabel(new ImageIcon(bgImage));\n\n        display.setContentPane(displayBackground);\n    }\n\n\tpublic void displayAccusationResult(boolean result) {\n\t\n        if (result)\n            JOptionPane.showMessageDialog(null, \u0022Win\u0022);\n        else {\n            JOptionPane.showMessageDialog(null, \u0022Lose\u0022);\n//            display.dispose();\n//            boardDisplay.setVisible(true);\n        }\n    }\n\n\tpublic void viewMurderEnvelope(boolean winner) {\n\t\n        this.winner = winner;\n        murderEnvelopeFrame = new JFrame(\u0022Murder Envelope\u0022);\n        murderEnvelopeFrame.setPreferredSize(new Dimension(1169, 600));\n        murderEnvelopeFrame.setBackground(Color.BLACK);\n        buildMurderEnvelopeImagesPanel();\n        buildMurderEnvelopeButtonPanel();\n        buildMurderEnvelopResultPanel();\n\n        murderEnvelopePanel = new JPanel();\n        murderEnvelopePanel.setSize(1169, 600);\n        murderEnvelopePanel.setLayout(new GridLayout(3, 1));\n        murderEnvelopePanel.setBackground(Color.BLACK);\n\n        murderEnvelopePanel.add(murderEnvelopeImages);\n        murderEnvelopePanel.add(murderEnvelopeViewButton);\n        murderEnvelopePanel.add(murderEnvelopeResult);\n\n        murderEnvelopeFrame.add(murderEnvelopePanel);\n        murderEnvelopeFrame.pack();\n        murderEnvelopeFrame.validate();\n\n        display.setVisible(false);\n        murderEnvelopeFrame.setResizable(false);\n        murderEnvelopeFrame.setLocationRelativeTo(null);\n        murderEnvelopeFrame.setVisible(true);\n    }\n\n\tpublic void buildMurderEnvelopeImagesPanel() {\n\t\n        murderCharacterImage = new JLabel(new ImageIcon(\n                GameLogic.getDeck().getMurderEnvelope().get(0).getImage()));\n        murderWeaponImage = new JLabel(new ImageIcon(\n                GameLogic.getDeck().getMurderEnvelope().get(1).getImage()));\n        murderRoomImage = new JLabel(new ImageIcon(\n                GameLogic.getDeck().getMurderEnvelope().get(2).getImage()));\n\n        murderEnvelopeImages = new JPanel();\n        murderEnvelopeImages.setSize(1169, 100);\n        murderEnvelopeImages.setLayout(new GridLayout(1, 3));\n        murderEnvelopeImages.add(murderCharacterImage);\n        murderCharacterImage.setAlignmentX(Component.CENTER_ALIGNMENT);\n        murderCharacterImage.setVisible(false);\n        murderEnvelopeImages.add(murderWeaponImage);\n        murderWeaponImage.setAlignmentX(Component.CENTER_ALIGNMENT);\n        murderWeaponImage.setVisible(false);\n        murderEnvelopeImages.add(murderRoomImage);\n        murderRoomImage.setAlignmentX(Component.CENTER_ALIGNMENT);\n        murderRoomImage.setVisible(false);\n        murderEnvelopeImages.setOpaque(false);\n        murderEnvelopeImages.setBackground(Color.BLACK);\n    }\n\n\tpublic void buildMurderEnvelopeButtonPanel() {\n\t\n        murderEnvelopeViewButton = new JPanel();\n        JButton viewButton = new JButton(\u0022Time to check the murder envelope...\u0022);\n        viewButton.setAlignmentY(JButton.CENTER);\n        viewButton.addActionListener(new displayMurderEnvelopeListener(viewButton));\n        viewButton.setAlignmentY(Component.CENTER_ALIGNMENT);\n        murderEnvelopeViewButton.add(viewButton);\n        murderEnvelopeViewButton.setOpaque(false);\n        murderEnvelopeViewButton.setBackground(Color.BLACK);\n    }\n\n\tpublic void buildMurderEnvelopResultPanel() {\n\t\n        String labelString;\n        if (winner)\n            labelString = \u0022win\u0022;\n        else\n            labelString = \u0022lose\u0022;\n\n        JLabel labelLabel;\n        URL labelURL = this.getClass().getResource(\u0022you\u0022 + labelString + \u0022.jpg\u0022);\n        BufferedImage labelImage = null;\n        try {\n            labelImage = ImageIO.read(labelURL);\n        } catch (Exception e) {\n            e.printStackTrace();\n            // #NuclearOption\n            System.exit(1);\n        }\n\n        labelLabel = new JLabel(new ImageIcon(labelImage));\n        labelLabel.setAlignmentX(JLabel.CENTER);\n        murderEnvelopeResult = new JPanel();\n        murderEnvelopeResult.add(labelLabel);\n        murderEnvelopeResult.setVisible(false);\n        murderEnvelopeResult.setOpaque(false);\n        murderEnvelopeResult.setBackground(Color.BLACK);\n    }\n\n\tpublic cluedo_game.AccuseMenu getThis() {\n\t\n        return this;\n    }\n\n\tpublic javax.swing.JFrame constructResultFrame(java.lang.String name) {\n\t\n        JFrame frame = new JFrame();\n        JPanel win = new JPanel();\n        win.setLayout(new GridLayout(2, 1));\n        win.add(new JLabel(\u0022\\n\\t\u0022 + name\n                + \u0022 has won the game!\\t\\n\u0022));\n        JButton winButton = new JButton(\u0022End Game\u0022);\n        winButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                System.exit(1);\n            }\n        });\n        win.add(winButton);\n        win.validate();\n        frame.add(win);\n        frame.pack();\n        frame.setLocationRelativeTo(null);\n\n        return frame;\n    }\n\n\tclass AccuseListener implements java.awt.event.ActionListener {\n\n\t\t@java.lang.Override\n\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\n\t\t\n            if(getGuessed()) {\n                // Add images for viewing murder envelope\n                characterAccusedLabel = new JLabel(characterAccusedImage);\n                weaponAccusedLabel = new JLabel(weaponAccusedImage);\n                roomAccusedLabel = new JLabel(roomAccusedImage);\n\n                accuseButtonPressResult = JOptionPane.showConfirmDialog(null, \u0022Do you think it was: \\n\u0022 +\n                    accusedStrings[0].substring(0, 1).toUpperCase().concat(accusedStrings[0].substring(1))\n                    + \u0022 in the \u0022 +\n                    accusedStrings[2].substring(0, 1).toUpperCase().concat(accusedStrings[2].substring(1)) +\n                    \u0022 with the \u0022 +\n                    accusedStrings[1].substring(0, 1).toUpperCase().concat(accusedStrings[1].substring(1)) + \u0022?\u0022,\n                    null, JOptionPane.YES_NO_OPTION);\n                if (accuseButtonPressResult == JOptionPane.YES_OPTION)\n//                    displayAccusationResult(GameLogic.Accusing.checkAccusation\n//                            (accusedStrings, accusingPlayer, getThis()));\n                    winner = GameLogic.Accusing.checkAccusation(accusedStrings, accusingPlayer, getThis());\n            }\n        }\n\n\t}\n\n\tclass ButtonAL implements java.awt.event.ActionListener {\n\n\t\tint index;\n\n\t\tjavax.swing.JButton[] type;\n\n\t\tjavax.swing.ImageIcon[] pics;\n\n\t\tjava.lang.String label;\n\n\t\tint typeIndex;\n\n\t\tjavax.swing.ImageIcon image;\n\n\t\tpublic ButtonAL(int index, javax.swing.JButton[] type, javax.swing.ImageIcon[] pics, java.lang.String label, int typeIndex, javax.swing.ImageIcon image) {\n\t\t\n            this.index = index;\n            this.type = type;\n            this.pics = pics;\n            this.label = label;\n            this.typeIndex = typeIndex;\n            this.image = image;\n        }\n\n\t\t@java.lang.Override\n\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\n\t\t\n            // If this button is clicked, every other button should become black and white\n            for (int i = 0; i \u003c type.length; i++) {\n                if (i != index) {\n                    type[i].setIcon(pics[i + type.length]);\n                    type[i].setBorderPainted(false);\n                }\n                else {\n                    type[i].setIcon(pics[i]);\n                    type[i].setBorderPainted(true);\n                }\n            }\n            switch (typeIndex) {\n                case 0: // Character\n                    characterAccusedImage = image;\n                    break;\n                case 1: // Weapon\n                    weaponAccusedImage = image;\n                case 2: // Room\n                    roomAccusedImage = image;\n\n            }\n            // Assign this button\u0027s string label to the appropriate accused string\n            accusedStrings[typeIndex] = label;\n            // Check this type as \u0027guessed\u0027\n            if (!guessed[typeIndex])\n                guessed[typeIndex] = true;\n            // Make accuse button visible if it wasn\u0027t already\n                // and all three types have been guessed\n            if (getGuessed() \u0026\u0026 !accuse.isVisible())\n                accuse.setVisible(true);\n        }\n\n\t}\n\n\tclass displayMurderEnvelopeListener implements java.awt.event.ActionListener {\n\n\t\tjavax.swing.JButton button;\n\n\t\tpublic displayMurderEnvelopeListener(javax.swing.JButton button) {\n\t\t\n            this.button = button;\n        }\n\n\t\t@java.lang.Override\n\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\n\t\t\n            button.setText(\u0022Opening the murder envelope...\u0022);\n            button.revalidate();\n            try {\n                murderCharacterImage.setVisible(true);\n                TimeUnit.SECONDS.sleep(1);\n                murderWeaponImage.setVisible(true);\n                TimeUnit.SECONDS.sleep(1);\n                murderRoomImage.setVisible(true);\n                TimeUnit.SECONDS.sleep(1);\n                murderEnvelopeResult.setVisible(true);\n                button.setText(\u0022Okay\u0022);\n                button.removeActionListener(this);\n                button.addActionListener((winner) ? new winListener() : new loseListener());\n//                button.addActionListener(new winListener());\n\n\n            } catch (Exception ex) { ex.printStackTrace(); }\n        }\n\n\t}\n\n\tclass winListener implements java.awt.event.ActionListener {\n\n\t\t@java.lang.Override\n\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\n\t\t\n            JFrame winFrame =\n                    constructResultFrame(GameLogic.getUi().getCurrentPlayer().getName());\n            display.dispose();\n            murderEnvelopeFrame.dispose();\n            winFrame.setVisible(true);\n        }\n\n\t}\n\n\tclass loseListener implements java.awt.event.ActionListener {\n\n\t\t@java.lang.Override\n\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\n\t\t\n            display.dispose();\n            murderEnvelopeFrame.dispose();\n            Token temp;\n            if (GameLogic.getPlayerList().getNumberOfPlayers() == 1) {\n                // If there is one player left, we find their name and pronounce\n                    // them the winner\n                temp = GameLogic.getPlayerList().getFirst();\n                while (!temp.getInGame())\n                    temp = temp.next();\n                JFrame loseFrame =\n                        constructResultFrame(temp.getName());\n                display.dispose();\n                murderEnvelopeFrame.dispose();\n                loseFrame.setVisible(true);\n            }\n            else\n                boardDisplay.setVisible(true);\n        }\n\n\t}\n\n}\n"
  },
  {
    "class": "org.wasps.model.ClassModel",
    "constructors": [],
    "fields": [],
    "imports": [
      "org.wasps.data.repository.concretes.ModelRepository",
      "org.wasps.data.repository.concretes.ParsedRepository"
    ],
    "interface": true,
    "methods": [
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "model()",
        "parameters": [],
        "returnType": "ModelRepository",
        "sourceCode": []
      },
      {
        "class": "org.wasps.model.MethodModel",
        "lineLength": 0,
        "name": "parsed()",
        "parameters": [],
        "returnType": "ParsedRepository",
        "sourceCode": []
      }
    ],
    "name": "IDataStore",
    "packageName": "org.wasps.data.repository.abstracts",
    "smellReports": {},
    "sourceCode": "package org.wasps.data.repository.abstracts;\n\nimport org.wasps.data.repository.concretes.ModelRepository;\nimport org.wasps.data.repository.concretes.ParsedRepository;\n\npublic interface IDataStore {\n\n\torg.wasps.data.repository.concretes.ModelRepository model();\n\n\torg.wasps.data.repository.concretes.ParsedRepository parsed();\n\n}\n"
  }
]